
RTC_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004f58  08004f58  00005f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005024  08005024  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005024  08005024  00006024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800502c  0800502c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800502c  0800502c  0000602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005034  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  0800509c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  0800509c  00007284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e15b  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002403  00000000  00000000  000151f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000175f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000934  00000000  00000000  00018218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c80  00000000  00000000  00018b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0b8  00000000  00000000  000407cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efe3d  00000000  00000000  0004f884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f6c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000392c  00000000  00000000  0013f704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00143030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f40 	.word	0x08004f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004f40 	.word	0x08004f40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f000 ff5d 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f000 fda5 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f000 fd96 	bl	8001148 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <_write>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file,	//file descriptor
		char *ptr, 	//pointer to the string to transmit
		int len)		//lenght of the string
{
 800062c:	b480      	push	{r7}
 800062e:	b087      	sub	sp, #28
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e00f      	b.n	800065e <_write+0x32>
	{
		//Wait untill tx data reg is ready to take data
		while(!(USART2->ISR & USART_ISR_TXE));
 800063e:	bf00      	nop
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <_write+0x48>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f9      	beq.n	8000640 <_write+0x14>

		//Load data totc=x reg
		USART2->TDR = (uint8_t)ptr[DataIdx];
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	4413      	add	r3, r2
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <_write+0x48>)
 8000656:	851a      	strh	r2, [r3, #40]	@ 0x28
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	429a      	cmp	r2, r3
 8000664:	dbeb      	blt.n	800063e <_write+0x12>
	}
	//return number of bytes written
	return len;
 8000666:	687b      	ldr	r3, [r7, #4]
}
 8000668:	4618      	mov	r0, r3
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	40004400 	.word	0x40004400

08000678 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800067e:	f000 fbdd 	bl	8000e3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000682:	f000 f845 	bl	8000710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000686:	f7ff ff6b 	bl	8000560 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800068a:	f000 fb21 	bl	8000cd0 <MX_USART2_UART_Init>
	MX_RTC_Init();
 800068e:	f000 f899 	bl	80007c4 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */

	set_time(0x10, 0x30, 0x0, 0x22, RTC_WEEKDAY_TUESDAY, RTC_MONTH_MAY, 0x24);
 8000692:	2324      	movs	r3, #36	@ 0x24
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2305      	movs	r3, #5
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2302      	movs	r3, #2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2322      	movs	r3, #34	@ 0x22
 80006a0:	2200      	movs	r2, #0
 80006a2:	2130      	movs	r1, #48	@ 0x30
 80006a4:	2010      	movs	r0, #16
 80006a6:	f000 fa45 	bl	8000b34 <set_time>

	char Time[9] = {'0/'};
 80006aa:	232f      	movs	r3, #47	@ 0x2f
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	711a      	strb	r2, [r3, #4]
	char Date[12] = {'0/'};
 80006b8:	232f      	movs	r3, #47	@ 0x2f
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
	char timestmp = {'0/'};
 80006c4:	232f      	movs	r3, #47	@ 0x2f
 80006c6:	75fb      	strb	r3, [r7, #23]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006c8:	2120      	movs	r1, #32
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f000 fefd 	bl	80014cc <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d6:	f000 fc2d 	bl	8000f34 <HAL_Delay>

		get_time(Time, Date);
 80006da:	463a      	mov	r2, r7
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa78 	bl	8000bd8 <get_time>
		get_timestamp(timestmp);
 80006e8:	7dfb      	ldrb	r3, [r7, #23]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fab4 	bl	8000c58 <get_timestamp>
		printf("hello stm32\n\r");
 80006f0:	4805      	ldr	r0, [pc, #20]	@ (8000708 <main+0x90>)
 80006f2:	f003 fc8d 	bl	8004010 <iprintf>
		fflush(stdout);
 80006f6:	4b05      	ldr	r3, [pc, #20]	@ (800070c <main+0x94>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fbb1 	bl	8003e64 <fflush>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000702:	bf00      	nop
 8000704:	e7e0      	b.n	80006c8 <main+0x50>
 8000706:	bf00      	nop
 8000708:	08004f58 	.word	0x08004f58
 800070c:	20000018 	.word	0x20000018

08000710 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	@ 0x58
 8000714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	@ 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fceb 	bl	80040fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000736:	f000 fef1 	bl	800151c <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000740:	f000 f839 	bl	80007b6 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000744:	230a      	movs	r3, #10
 8000746:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800074c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2310      	movs	r3, #16
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000752:	2301      	movs	r3, #1
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075a:	2302      	movs	r3, #2
 800075c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000762:	230a      	movs	r3, #10
 8000764:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000766:	2307      	movs	r3, #7
 8000768:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4618      	mov	r0, r3
 8000778:	f000 ff26 	bl	80015c8 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x76>
	{
		Error_Handler();
 8000782:	f000 f818 	bl	80007b6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2303      	movs	r3, #3
 800078c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	2104      	movs	r1, #4
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 faee 	bl	8001d80 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80007aa:	f000 f804 	bl	80007b6 <Error_Handler>
	}
}
 80007ae:	bf00      	nop
 80007b0:	3758      	adds	r7, #88	@ 0x58
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ba:	b672      	cpsid	i
}
 80007bc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007be:	bf00      	nop
 80007c0:	e7fd      	b.n	80007be <Error_Handler+0x8>
	...

080007c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007d8:	2300      	movs	r3, #0
 80007da:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000898 <MX_RTC_Init+0xd4>)
 80007de:	4a2f      	ldr	r2, [pc, #188]	@ (800089c <MX_RTC_Init+0xd8>)
 80007e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <MX_RTC_Init+0xd4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <MX_RTC_Init+0xd4>)
 80007ea:	227f      	movs	r2, #127	@ 0x7f
 80007ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000898 <MX_RTC_Init+0xd4>)
 80007f0:	22ff      	movs	r2, #255	@ 0xff
 80007f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f4:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <MX_RTC_Init+0xd4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 80007fa:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <MX_RTC_Init+0xd4>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000800:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_RTC_Init+0xd4>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000806:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <MX_RTC_Init+0xd4>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800080c:	4822      	ldr	r0, [pc, #136]	@ (8000898 <MX_RTC_Init+0xd4>)
 800080e:	f002 f997 	bl	8002b40 <HAL_RTC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000818:	f7ff ffcd 	bl	80007b6 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 800081c:	2310      	movs	r3, #16
 800081e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8000820:	2330      	movs	r3, #48	@ 0x30
 8000822:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000824:	2300      	movs	r3, #0
 8000826:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	4818      	ldr	r0, [pc, #96]	@ (8000898 <MX_RTC_Init+0xd4>)
 8000838:	f002 fa0a 	bl	8002c50 <HAL_RTC_SetTime>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000842:	f7ff ffb8 	bl	80007b6 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000846:	2302      	movs	r3, #2
 8000848:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 800084a:	2305      	movs	r3, #5
 800084c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x21;
 800084e:	2321      	movs	r3, #33	@ 0x21
 8000850:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000852:	2300      	movs	r3, #0
 8000854:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	2201      	movs	r2, #1
 800085a:	4619      	mov	r1, r3
 800085c:	480e      	ldr	r0, [pc, #56]	@ (8000898 <MX_RTC_Init+0xd4>)
 800085e:	f002 faf0 	bl	8002e42 <HAL_RTC_SetDate>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000868:	f7ff ffa5 	bl	80007b6 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 800086c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8000870:	4809      	ldr	r0, [pc, #36]	@ (8000898 <MX_RTC_Init+0xd4>)
 8000872:	f002 fc8b 	bl	800318c <HAL_RTCEx_SetCalibrationOutPut>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800087c:	f7ff ff9b 	bl	80007b6 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_RTC_Init+0xd4>)
 8000882:	f002 fcca 	bl	800321a <HAL_RTCEx_SetRefClock>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800088c:	f7ff ff93 	bl	80007b6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000084 	.word	0x20000084
 800089c:	40002800 	.word	0x40002800

080008a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0aa      	sub	sp, #168	@ 0xa8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2288      	movs	r2, #136	@ 0x88
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 fc1a 	bl	80040fa <memset>
  if(rtcHandle->Instance==RTC)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a21      	ldr	r2, [pc, #132]	@ (8000950 <HAL_RTC_MspInit+0xb0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d13a      	bne.n	8000946 <HAL_RTC_MspInit+0xa6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fc70 	bl	80021c8 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 80008ee:	f7ff ff62 	bl	80007b6 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_RTC_MspInit+0xb4>)
 80008f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008f8:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <HAL_RTC_MspInit+0xb4>)
 80008fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_RTC_MspInit+0xb4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <HAL_RTC_MspInit+0xb4>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_RTC_MspInit+0xb4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800091a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800091e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	@ (8000958 <HAL_RTC_MspInit+0xb8>)
 8000942:	f000 fc01 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	37a8      	adds	r7, #168	@ 0xa8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40002800 	.word	0x40002800
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	@ (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	@ 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	@ 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fa:	f000 fa7b 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	e00a      	b.n	8000a2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a14:	f3af 8000 	nop.w
 8000a18:	4601      	mov	r1, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	60ba      	str	r2, [r7, #8]
 8000a20:	b2ca      	uxtb	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	3301      	adds	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dbf0      	blt.n	8000a14 <_read+0x12>
  }

  return len;
 8000a32:	687b      	ldr	r3, [r7, #4]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a64:	605a      	str	r2, [r3, #4]
  return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_isatty>:

int _isatty(int file)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7c:	2301      	movs	r3, #1
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b085      	sub	sp, #20
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f003 fb60 	bl	8004198 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20018000 	.word	0x20018000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200000a8 	.word	0x200000a8
 8000b0c:	20000288 	.word	0x20000288

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <set_time>:
 *
 *  uint8_t weekday = RTC_WEEKDAY_TUESDAY, uint8_t month = RTC_MONTH_MAY, uint8_t year = 24,  unin8_t date = 22
 */

void set_time (char hrs, char min, char sec,  char date, uint8_t weekday, uint8_t month, char year)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	4608      	mov	r0, r1
 8000b3e:	4611      	mov	r1, r2
 8000b40:	461a      	mov	r2, r3
 8000b42:	4623      	mov	r3, r4
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	4603      	mov	r3, r0
 8000b48:	71bb      	strb	r3, [r7, #6]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	717b      	strb	r3, [r7, #5]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = hrs;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 8000b6e:	797b      	ldrb	r3, [r7, #5]
 8000b70:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <set_time+0xa0>)
 8000b84:	f002 f864 	bl	8002c50 <HAL_RTC_SetTime>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <set_time+0x5e>
	{
		Error_Handler();
 8000b8e:	f7ff fe12 	bl	80007b6 <Error_Handler>
	}

	sDate.WeekDay = weekday;
 8000b92:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b96:	723b      	strb	r3, [r7, #8]
	sDate.Month = month;
 8000b98:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000b9c:	727b      	strb	r3, [r7, #9]
	sDate.Date = date;
 8000b9e:	793b      	ldrb	r3, [r7, #4]
 8000ba0:	72bb      	strb	r3, [r7, #10]
	sDate.Year = year;
 8000ba2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000ba6:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	2201      	movs	r2, #1
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4808      	ldr	r0, [pc, #32]	@ (8000bd4 <set_time+0xa0>)
 8000bb2:	f002 f946 	bl	8002e42 <HAL_RTC_SetDate>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <set_time+0x8c>
	{
		Error_Handler();
 8000bbc:	f7ff fdfb 	bl	80007b6 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8000bc0:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <set_time+0xa0>)
 8000bc8:	f002 fb6b 	bl	80032a2 <HAL_RTCEx_BKUPWrite>
}
 8000bcc:	bf00      	nop
 8000bce:	3724      	adds	r7, #36	@ 0x24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	20000084 	.word	0x20000084

08000bd8 <get_time>:

void get_time(char Time[], char Date[])
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef gDate = {0};
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
	RTC_TimeTypeDef gTime = {0};
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4813      	ldr	r0, [pc, #76]	@ (8000c4c <get_time+0x74>)
 8000c00:	f002 f8c3 	bl	8002d8a <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480f      	ldr	r0, [pc, #60]	@ (8000c4c <get_time+0x74>)
 8000c0e:	f002 f99f 	bl	8002f50 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)Time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000c12:	7a3b      	ldrb	r3, [r7, #8]
 8000c14:	461a      	mov	r2, r3
 8000c16:	7a7b      	ldrb	r3, [r7, #9]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	7abb      	ldrb	r3, [r7, #10]
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	490b      	ldr	r1, [pc, #44]	@ (8000c50 <get_time+0x78>)
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f003 fa06 	bl	8004034 <siprintf>
	/* Display date Format: dd-mm-yy */
	sprintf((char*)Date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000c28:	7fbb      	ldrb	r3, [r7, #30]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	7f7b      	ldrb	r3, [r7, #29]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	7ffb      	ldrb	r3, [r7, #31]
 8000c32:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4906      	ldr	r1, [pc, #24]	@ (8000c54 <get_time+0x7c>)
 8000c3c:	6838      	ldr	r0, [r7, #0]
 8000c3e:	f003 f9f9 	bl	8004034 <siprintf>
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000084 	.word	0x20000084
 8000c50:	08004f68 	.word	0x08004f68
 8000c54:	08004f78 	.word	0x08004f78

08000c58 <get_timestamp>:


void get_timestamp(char timestamp[])
{
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b08c      	sub	sp, #48	@ 0x30
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate = {0};
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
	RTC_TimeTypeDef gTime = {0};
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4812      	ldr	r0, [pc, #72]	@ (8000cc8 <get_timestamp+0x70>)
 8000c7e:	f002 f884 	bl	8002d8a <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2200      	movs	r2, #0
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <get_timestamp+0x70>)
 8000c8c:	f002 f960 	bl	8002f50 <HAL_RTC_GetDate>

	/* Display timestamp Format: hh:mm:ss dd-mm-yy */
	sprintf((char*)timestamp,"%02d:%02d:%02d %02d-%02d-%2d",gTime.Hours, gTime.Minutes, gTime.Seconds ,gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000c90:	7a3b      	ldrb	r3, [r7, #8]
 8000c92:	461c      	mov	r4, r3
 8000c94:	7a7b      	ldrb	r3, [r7, #9]
 8000c96:	461d      	mov	r5, r3
 8000c98:	7abb      	ldrb	r3, [r7, #10]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	7fbb      	ldrb	r3, [r7, #30]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	7f7b      	ldrb	r3, [r7, #29]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	7ffb      	ldrb	r3, [r7, #31]
 8000ca6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000caa:	9303      	str	r3, [sp, #12]
 8000cac:	9002      	str	r0, [sp, #8]
 8000cae:	9101      	str	r1, [sp, #4]
 8000cb0:	9200      	str	r2, [sp, #0]
 8000cb2:	462b      	mov	r3, r5
 8000cb4:	4622      	mov	r2, r4
 8000cb6:	4905      	ldr	r1, [pc, #20]	@ (8000ccc <get_timestamp+0x74>)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f003 f9bb 	bl	8004034 <siprintf>
}
 8000cbe:	bf00      	nop
 8000cc0:	3720      	adds	r7, #32
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000084 	.word	0x20000084
 8000ccc:	08004f88 	.word	0x08004f88

08000cd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cd6:	4a15      	ldr	r2, [pc, #84]	@ (8000d2c <MX_USART2_UART_Init+0x5c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d14:	f002 fade 	bl	80032d4 <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f7ff fd4a 	bl	80007b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000ac 	.word	0x200000ac
 8000d2c:	40004400 	.word	0x40004400

08000d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ac      	sub	sp, #176	@ 0xb0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2288      	movs	r2, #136	@ 0x88
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 f9d2 	bl	80040fa <memset>
  if(uartHandle->Instance==USART2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a21      	ldr	r2, [pc, #132]	@ (8000de0 <HAL_UART_MspInit+0xb0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d13b      	bne.n	8000dd8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fa2b 	bl	80021c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d78:	f7ff fd1d 	bl	80007b6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <HAL_UART_MspInit+0xb4>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d80:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <HAL_UART_MspInit+0xb4>)
 8000d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_UART_MspInit+0xb4>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <HAL_UART_MspInit+0xb4>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d98:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <HAL_UART_MspInit+0xb4>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <HAL_UART_MspInit+0xb4>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dac:	230c      	movs	r3, #12
 8000dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd4:	f000 f9b8 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dd8:	bf00      	nop
 8000dda:	37b0      	adds	r7, #176	@ 0xb0
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40021000 	.word	0x40021000

08000de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff fe90 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <LoopForever+0xe>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	@ (8000e34 <LoopForever+0x16>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f003 f9c5 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1a:	f7ff fc2d 	bl	8000678 <main>

08000e1e <LoopForever>:

LoopForever:
    b LoopForever
 8000e1e:	e7fe      	b.n	8000e1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e2c:	08005034 	.word	0x08005034
  ldr r2, =_sbss
 8000e30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e34:	20000284 	.word	0x20000284

08000e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_2_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <HAL_Init+0x3c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <HAL_Init+0x3c>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 f944 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 f80f 	bl	8000e7c <HAL_InitTick>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	e001      	b.n	8000e6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6a:	f7ff fd77 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_InitTick+0x6c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_InitTick+0x70>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <HAL_InitTick+0x6c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f941 	bl	800112e <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10f      	bne.n	8000ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d809      	bhi.n	8000ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec0:	f000 f919 	bl	80010f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_InitTick+0x74>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e007      	b.n	8000edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e004      	b.n	8000edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e001      	b.n	8000edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000134 	.word	0x20000134

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000134 	.word	0x20000134

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff47 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5c 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e17f      	b.n	8001458 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8171 	beq.w	8001452 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d005      	beq.n	8001188 <HAL_GPIO_Init+0x40>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 0201 	and.w	r2, r3, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d118      	bne.n	8001228 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b03      	cmp	r3, #3
 8001232:	d017      	beq.n	8001264 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d123      	bne.n	80012b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	6939      	ldr	r1, [r7, #16]
 80012b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0203 	and.w	r2, r3, #3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80ac 	beq.w	8001452 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001478 <HAL_GPIO_Init+0x330>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001478 <HAL_GPIO_Init+0x330>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6613      	str	r3, [r2, #96]	@ 0x60
 8001306:	4b5c      	ldr	r3, [pc, #368]	@ (8001478 <HAL_GPIO_Init+0x330>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001312:	4a5a      	ldr	r2, [pc, #360]	@ (800147c <HAL_GPIO_Init+0x334>)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x242>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4f      	ldr	r2, [pc, #316]	@ (8001480 <HAL_GPIO_Init+0x338>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x23e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4e      	ldr	r2, [pc, #312]	@ (8001484 <HAL_GPIO_Init+0x33c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x23a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4d      	ldr	r2, [pc, #308]	@ (8001488 <HAL_GPIO_Init+0x340>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x236>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4c      	ldr	r2, [pc, #304]	@ (800148c <HAL_GPIO_Init+0x344>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x232>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4b      	ldr	r2, [pc, #300]	@ (8001490 <HAL_GPIO_Init+0x348>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x22e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4a      	ldr	r2, [pc, #296]	@ (8001494 <HAL_GPIO_Init+0x34c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x22a>
 800136e:	2306      	movs	r3, #6
 8001370:	e00c      	b.n	800138c <HAL_GPIO_Init+0x244>
 8001372:	2307      	movs	r3, #7
 8001374:	e00a      	b.n	800138c <HAL_GPIO_Init+0x244>
 8001376:	2305      	movs	r3, #5
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x244>
 800137a:	2304      	movs	r3, #4
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x244>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x244>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x244>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x244>
 800138a:	2300      	movs	r3, #0
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800139c:	4937      	ldr	r1, [pc, #220]	@ (800147c <HAL_GPIO_Init+0x334>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001498 <HAL_GPIO_Init+0x350>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ce:	4a32      	ldr	r2, [pc, #200]	@ (8001498 <HAL_GPIO_Init+0x350>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <HAL_GPIO_Init+0x350>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f8:	4a27      	ldr	r2, [pc, #156]	@ (8001498 <HAL_GPIO_Init+0x350>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_GPIO_Init+0x350>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001422:	4a1d      	ldr	r2, [pc, #116]	@ (8001498 <HAL_GPIO_Init+0x350>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <HAL_GPIO_Init+0x350>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800144c:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <HAL_GPIO_Init+0x350>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	f47f ae78 	bne.w	8001158 <HAL_GPIO_Init+0x10>
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000
 8001480:	48000400 	.word	0x48000400
 8001484:	48000800 	.word	0x48000800
 8001488:	48000c00 	.word	0x48000c00
 800148c:	48001000 	.word	0x48001000
 8001490:	48001400 	.word	0x48001400
 8001494:	48001800 	.word	0x48001800
 8001498:	40010400 	.word	0x40010400

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43d9      	mvns	r1, r3
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	400b      	ands	r3, r1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001504:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <HAL_PWREx_GetVoltageRange+0x18>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40007000 	.word	0x40007000

0800151c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800152a:	d130      	bne.n	800158e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800152c:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001538:	d038      	beq.n	80015ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800153a:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001542:	4a1e      	ldr	r2, [pc, #120]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001544:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2232      	movs	r2, #50	@ 0x32
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4a1b      	ldr	r2, [pc, #108]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	0c9b      	lsrs	r3, r3, #18
 800155c:	3301      	adds	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001560:	e002      	b.n	8001568 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3b01      	subs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001574:	d102      	bne.n	800157c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f2      	bne.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001588:	d110      	bne.n	80015ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e00f      	b.n	80015ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159a:	d007      	beq.n	80015ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015a4:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40007000 	.word	0x40007000
 80015c0:	20000000 	.word	0x20000000
 80015c4:	431bde83 	.word	0x431bde83

080015c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e3ca      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015da:	4b97      	ldr	r3, [pc, #604]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e4:	4b94      	ldr	r3, [pc, #592]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80e4 	beq.w	80017c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_RCC_OscConfig+0x4a>
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b0c      	cmp	r3, #12
 8001606:	f040 808b 	bne.w	8001720 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b01      	cmp	r3, #1
 800160e:	f040 8087 	bne.w	8001720 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001612:	4b89      	ldr	r3, [pc, #548]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x62>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e3a2      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1a      	ldr	r2, [r3, #32]
 800162e:	4b82      	ldr	r3, [pc, #520]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <HAL_RCC_OscConfig+0x7c>
 800163a:	4b7f      	ldr	r3, [pc, #508]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001642:	e005      	b.n	8001650 <HAL_RCC_OscConfig+0x88>
 8001644:	4b7c      	ldr	r3, [pc, #496]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001650:	4293      	cmp	r3, r2
 8001652:	d223      	bcs.n	800169c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fd55 	bl	8002108 <RCC_SetFlashLatencyFromMSIRange>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e383      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001668:	4b73      	ldr	r3, [pc, #460]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a72      	ldr	r2, [pc, #456]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b70      	ldr	r3, [pc, #448]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	496d      	ldr	r1, [pc, #436]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001686:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	4968      	ldr	r1, [pc, #416]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e025      	b.n	80016e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169c:	4b66      	ldr	r3, [pc, #408]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a65      	ldr	r2, [pc, #404]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4960      	ldr	r1, [pc, #384]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	495b      	ldr	r1, [pc, #364]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fd15 	bl	8002108 <RCC_SetFlashLatencyFromMSIRange>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e343      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e8:	f000 fc4a 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b52      	ldr	r3, [pc, #328]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	4950      	ldr	r1, [pc, #320]	@ (800183c <HAL_RCC_OscConfig+0x274>)
 80016fa:	5ccb      	ldrb	r3, [r1, r3]
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	4a4e      	ldr	r2, [pc, #312]	@ (8001840 <HAL_RCC_OscConfig+0x278>)
 8001706:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001708:	4b4e      	ldr	r3, [pc, #312]	@ (8001844 <HAL_RCC_OscConfig+0x27c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fbb5 	bl	8000e7c <HAL_InitTick>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d052      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	e327      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d032      	beq.n	800178e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001728:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a42      	ldr	r2, [pc, #264]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001734:	f7ff fbf2 	bl	8000f1c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800173c:	f7ff fbee 	bl	8000f1c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e310      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800174e:	4b3a      	ldr	r3, [pc, #232]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800175a:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a36      	ldr	r2, [pc, #216]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4931      	ldr	r1, [pc, #196]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001778:	4b2f      	ldr	r3, [pc, #188]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	492c      	ldr	r1, [pc, #176]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
 800178c:	e01a      	b.n	80017c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a29      	ldr	r2, [pc, #164]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800179a:	f7ff fbbf 	bl	8000f1c <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a2:	f7ff fbbb 	bl	8000f1c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e2dd      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b4:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0x1da>
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d074      	beq.n	80018ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x21a>
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d10e      	bne.n	80017fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d10b      	bne.n	80017fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d064      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2f0>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d160      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e2ba      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x24a>
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0b      	ldr	r2, [pc, #44]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800180a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e026      	b.n	8001860 <HAL_RCC_OscConfig+0x298>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800181a:	d115      	bne.n	8001848 <HAL_RCC_OscConfig+0x280>
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 8001822:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a02      	ldr	r2, [pc, #8]	@ (8001838 <HAL_RCC_OscConfig+0x270>)
 800182e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e014      	b.n	8001860 <HAL_RCC_OscConfig+0x298>
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	08004fa8 	.word	0x08004fa8
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004
 8001848:	4ba0      	ldr	r3, [pc, #640]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a9f      	ldr	r2, [pc, #636]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b9d      	ldr	r3, [pc, #628]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a9c      	ldr	r2, [pc, #624]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800185e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fb58 	bl	8000f1c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fb54 	bl	8000f1c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e276      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001882:	4b92      	ldr	r3, [pc, #584]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x2a8>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fb44 	bl	8000f1c <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fb40 	bl	8000f1c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e262      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018aa:	4b88      	ldr	r3, [pc, #544]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x2d0>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d060      	beq.n	8001988 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x310>
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d119      	bne.n	8001906 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d116      	bne.n	8001906 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d8:	4b7c      	ldr	r3, [pc, #496]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x328>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e23f      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b76      	ldr	r3, [pc, #472]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	4973      	ldr	r1, [pc, #460]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001904:	e040      	b.n	8001988 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d023      	beq.n	8001956 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190e:	4b6f      	ldr	r3, [pc, #444]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a6e      	ldr	r2, [pc, #440]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff faff 	bl	8000f1c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fafb 	bl	8000f1c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e21d      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001934:	4b65      	ldr	r3, [pc, #404]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b62      	ldr	r3, [pc, #392]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	495f      	ldr	r1, [pc, #380]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e018      	b.n	8001988 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001956:	4b5d      	ldr	r3, [pc, #372]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a5c      	ldr	r2, [pc, #368]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 800195c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff fadb 	bl	8000f1c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff fad7 	bl	8000f1c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1f9      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800197c:	4b53      	ldr	r3, [pc, #332]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d03c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199c:	4b4b      	ldr	r3, [pc, #300]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a2:	4a4a      	ldr	r2, [pc, #296]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff fab6 	bl	8000f1c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff fab2 	bl	8000f1c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1d4      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c6:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ef      	beq.n	80019b4 <HAL_RCC_OscConfig+0x3ec>
 80019d4:	e01b      	b.n	8001a0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d6:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019dc:	4a3b      	ldr	r2, [pc, #236]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa99 	bl	8000f1c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ee:	f7ff fa95 	bl	8000f1c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1b7      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a00:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ef      	bne.n	80019ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80a6 	beq.w	8001b68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a20:	4b2a      	ldr	r3, [pc, #168]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10d      	bne.n	8001a48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a30:	4a26      	ldr	r2, [pc, #152]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a38:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a48:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d118      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <HAL_RCC_OscConfig+0x508>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <HAL_RCC_OscConfig+0x508>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a60:	f7ff fa5c 	bl	8000f1c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a68:	f7ff fa58 	bl	8000f1c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e17a      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_RCC_OscConfig+0x508>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4d8>
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a9e:	e029      	b.n	8001af4 <HAL_RCC_OscConfig+0x52c>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d115      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x50c>
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aae:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001abe:	4a03      	ldr	r2, [pc, #12]	@ (8001acc <HAL_RCC_OscConfig+0x504>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ac8:	e014      	b.n	8001af4 <HAL_RCC_OscConfig+0x52c>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ada:	4a9b      	ldr	r2, [pc, #620]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ae4:	4b98      	ldr	r3, [pc, #608]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aea:	4a97      	ldr	r2, [pc, #604]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d016      	beq.n	8001b2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff fa0e 	bl	8000f1c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff fa0a 	bl	8000f1c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e12a      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ed      	beq.n	8001b04 <HAL_RCC_OscConfig+0x53c>
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f9f7 	bl	8000f1c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff f9f3 	bl	8000f1c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e113      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b48:	4b7f      	ldr	r3, [pc, #508]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ed      	bne.n	8001b32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b7a      	ldr	r3, [pc, #488]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b60:	4a79      	ldr	r2, [pc, #484]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80fe 	beq.w	8001d6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	f040 80d0 	bne.w	8001d1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b7c:	4b72      	ldr	r3, [pc, #456]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d130      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d127      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d11f      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bbc:	2a07      	cmp	r2, #7
 8001bbe:	bf14      	ite	ne
 8001bc0:	2201      	movne	r2, #1
 8001bc2:	2200      	moveq	r2, #0
 8001bc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d113      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	3b01      	subs	r3, #1
 8001bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d06e      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d069      	beq.n	8001ccc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bf8:	4b53      	ldr	r3, [pc, #332]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c04:	4b50      	ldr	r3, [pc, #320]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0ad      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c14:	4b4c      	ldr	r3, [pc, #304]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a4b      	ldr	r2, [pc, #300]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c20:	f7ff f97c 	bl	8000f1c <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f978 	bl	8000f1c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e09a      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3a:	4b43      	ldr	r3, [pc, #268]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c46:	4b40      	ldr	r3, [pc, #256]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	4b40      	ldr	r3, [pc, #256]	@ (8001d4c <HAL_RCC_OscConfig+0x784>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c56:	3a01      	subs	r2, #1
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	4311      	orrs	r1, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c60:	0212      	lsls	r2, r2, #8
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c68:	0852      	lsrs	r2, r2, #1
 8001c6a:	3a01      	subs	r2, #1
 8001c6c:	0552      	lsls	r2, r2, #21
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c74:	0852      	lsrs	r2, r2, #1
 8001c76:	3a01      	subs	r2, #1
 8001c78:	0652      	lsls	r2, r2, #25
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c80:	0912      	lsrs	r2, r2, #4
 8001c82:	0452      	lsls	r2, r2, #17
 8001c84:	430a      	orrs	r2, r1
 8001c86:	4930      	ldr	r1, [pc, #192]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2d      	ldr	r2, [pc, #180]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ca4:	f7ff f93a 	bl	8000f1c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff f936 	bl	8000f1c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e058      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cca:	e050      	b.n	8001d6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04f      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d148      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce8:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a16      	ldr	r2, [pc, #88]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cf4:	f7ff f912 	bl	8000f1c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f90e 	bl	8000f1c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e030      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x734>
 8001d1a:	e028      	b.n	8001d6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d023      	beq.n	8001d6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_RCC_OscConfig+0x780>)
 8001d28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f8f5 	bl	8000f1c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d34:	e00c      	b.n	8001d50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7ff f8f1 	bl	8000f1c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d905      	bls.n	8001d50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e013      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_RCC_OscConfig+0x7b0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1ec      	bne.n	8001d36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_OscConfig+0x7b0>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4905      	ldr	r1, [pc, #20]	@ (8001d78 <HAL_RCC_OscConfig+0x7b0>)
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_RCC_OscConfig+0x7b4>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
 8001d68:	e001      	b.n	8001d6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	feeefffc 	.word	0xfeeefffc

08001d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0e7      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b75      	ldr	r3, [pc, #468]	@ (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b72      	ldr	r3, [pc, #456]	@ (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	4970      	ldr	r1, [pc, #448]	@ (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0cf      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b66      	ldr	r3, [pc, #408]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d908      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b63      	ldr	r3, [pc, #396]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4960      	ldr	r1, [pc, #384]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d04c      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	4b5a      	ldr	r3, [pc, #360]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d121      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0a6      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1e:	4b54      	ldr	r3, [pc, #336]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d115      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e09a      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e36:	4b4e      	ldr	r3, [pc, #312]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e08e      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e46:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e086      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e56:	4b46      	ldr	r3, [pc, #280]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4943      	ldr	r1, [pc, #268]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e68:	f7ff f858 	bl	8000f1c <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7ff f854 	bl	8000f1c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e06e      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	4b3a      	ldr	r3, [pc, #232]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 020c 	and.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1eb      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d010      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d208      	bcs.n	8001ec6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	492b      	ldr	r1, [pc, #172]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec6:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d210      	bcs.n	8001ef6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 0207 	bic.w	r2, r3, #7
 8001edc:	4923      	ldr	r1, [pc, #140]	@ (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee4:	4b21      	ldr	r3, [pc, #132]	@ (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e036      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f02:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	4918      	ldr	r1, [pc, #96]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4910      	ldr	r1, [pc, #64]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f34:	f000 f824 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	490b      	ldr	r1, [pc, #44]	@ (8001f74 <HAL_RCC_ClockConfig+0x1f4>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f8>)
 8001f52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_ClockConfig+0x1fc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe ff8f 	bl	8000e7c <HAL_InitTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f62:	7afb      	ldrb	r3, [r7, #11]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	08004fa8 	.word	0x08004fa8
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f98:	4b3b      	ldr	r3, [pc, #236]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d121      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d11e      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fb4:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fc0:	4b31      	ldr	r3, [pc, #196]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	e005      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800208c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d102      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	e004      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d101      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002004:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x114>)
 8002006:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d134      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200e:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0xa6>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d003      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0xac>
 8002024:	e005      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002026:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x110>)
 8002028:	617b      	str	r3, [r7, #20]
      break;
 800202a:	e005      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x114>)
 800202e:	617b      	str	r3, [r7, #20]
      break;
 8002030:	e002      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	617b      	str	r3, [r7, #20]
      break;
 8002036:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002038:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	3301      	adds	r3, #1
 8002044:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	fb03 f202 	mul.w	r2, r3, r2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	0e5b      	lsrs	r3, r3, #25
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	3301      	adds	r3, #1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002078:	69bb      	ldr	r3, [r7, #24]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	@ 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	08004fc0 	.word	0x08004fc0
 8002090:	00f42400 	.word	0x00f42400
 8002094:	007a1200 	.word	0x007a1200

08002098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <HAL_RCC_GetHCLKFreq+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b4:	f7ff fff0 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4904      	ldr	r1, [pc, #16]	@ (80020d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08004fb8 	.word	0x08004fb8

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020e0:	f7ff ffda 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0adb      	lsrs	r3, r3, #11
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4904      	ldr	r1, [pc, #16]	@ (8002104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	08004fb8 	.word	0x08004fb8

08002108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002114:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002120:	f7ff f9ee 	bl	8001500 <HAL_PWREx_GetVoltageRange>
 8002124:	6178      	str	r0, [r7, #20]
 8002126:	e014      	b.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	4a24      	ldr	r2, [pc, #144]	@ (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002132:	6593      	str	r3, [r2, #88]	@ 0x58
 8002134:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002140:	f7ff f9de 	bl	8001500 <HAL_PWREx_GetVoltageRange>
 8002144:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002146:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	4a1d      	ldr	r2, [pc, #116]	@ (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002150:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002158:	d10b      	bne.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b80      	cmp	r3, #128	@ 0x80
 800215e:	d919      	bls.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2ba0      	cmp	r3, #160	@ 0xa0
 8002164:	d902      	bls.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002166:	2302      	movs	r3, #2
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	e013      	b.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800216c:	2301      	movs	r3, #1
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e010      	b.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b80      	cmp	r3, #128	@ 0x80
 8002176:	d902      	bls.n	800217e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002178:	2303      	movs	r3, #3
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e00a      	b.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b80      	cmp	r3, #128	@ 0x80
 8002182:	d102      	bne.n	800218a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002184:	2302      	movs	r3, #2
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	e004      	b.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b70      	cmp	r3, #112	@ 0x70
 800218e:	d101      	bne.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002190:	2301      	movs	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 0207 	bic.w	r2, r3, #7
 800219c:	4909      	ldr	r1, [pc, #36]	@ (80021c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021a4:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40022000 	.word	0x40022000

080021c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021d0:	2300      	movs	r3, #0
 80021d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021d4:	2300      	movs	r3, #0
 80021d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d041      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021ec:	d02a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021f2:	d824      	bhi.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021f8:	d008      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021fe:	d81e      	bhi.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002204:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002208:	d010      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800220a:	e018      	b.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800220c:	4b86      	ldr	r3, [pc, #536]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a85      	ldr	r2, [pc, #532]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002218:	e015      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fabb 	bl	800279c <RCCEx_PLLSAI1_Config>
 8002226:	4603      	mov	r3, r0
 8002228:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222a:	e00c      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3320      	adds	r3, #32
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fba6 	bl	8002984 <RCCEx_PLLSAI2_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800223c:	e003      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	74fb      	strb	r3, [r7, #19]
      break;
 8002242:	e000      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800224c:	4b76      	ldr	r3, [pc, #472]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800225a:	4973      	ldr	r1, [pc, #460]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002262:	e001      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d041      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002278:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800227c:	d02a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800227e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002282:	d824      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002288:	d008      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800228a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800228e:	d81e      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002298:	d010      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800229a:	e018      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800229c:	4b62      	ldr	r3, [pc, #392]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a61      	ldr	r2, [pc, #388]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022a8:	e015      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fa73 	bl	800279c <RCCEx_PLLSAI1_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ba:	e00c      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3320      	adds	r3, #32
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fb5e 	bl	8002984 <RCCEx_PLLSAI2_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022cc:	e003      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	74fb      	strb	r3, [r7, #19]
      break;
 80022d2:	e000      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10b      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022dc:	4b52      	ldr	r3, [pc, #328]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022ea:	494f      	ldr	r1, [pc, #316]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022f2:	e001      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a0 	beq.w	8002446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800230a:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	4a40      	ldr	r2, [pc, #256]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232a:	6593      	str	r3, [r2, #88]	@ 0x58
 800232c:	4b3e      	ldr	r3, [pc, #248]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002338:	2301      	movs	r3, #1
 800233a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233c:	4b3b      	ldr	r3, [pc, #236]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a3a      	ldr	r2, [pc, #232]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002348:	f7fe fde8 	bl	8000f1c <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800234e:	e009      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7fe fde4 	bl	8000f1c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d902      	bls.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	74fb      	strb	r3, [r7, #19]
        break;
 8002362:	e005      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002364:	4b31      	ldr	r3, [pc, #196]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ef      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d15c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002376:	4b2c      	ldr	r3, [pc, #176]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002380:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01f      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	d019      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002394:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800239e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023a0:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a6:	4a20      	ldr	r2, [pc, #128]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023c0:	4a19      	ldr	r2, [pc, #100]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fda3 	bl	8000f1c <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d8:	e00b      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fd9f 	bl	8000f1c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d902      	bls.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	74fb      	strb	r3, [r7, #19]
            break;
 80023f0:	e006      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ec      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002406:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002416:	4904      	ldr	r1, [pc, #16]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800241e:	e009      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
 8002424:	e006      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002434:	7c7b      	ldrb	r3, [r7, #17]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b9e      	ldr	r3, [pc, #632]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243e:	4a9d      	ldr	r2, [pc, #628]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002444:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002452:	4b98      	ldr	r3, [pc, #608]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002458:	f023 0203 	bic.w	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002460:	4994      	ldr	r1, [pc, #592]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002474:	4b8f      	ldr	r3, [pc, #572]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247a:	f023 020c 	bic.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002482:	498c      	ldr	r1, [pc, #560]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002496:	4b87      	ldr	r3, [pc, #540]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	4983      	ldr	r1, [pc, #524]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b8:	4b7e      	ldr	r3, [pc, #504]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	497b      	ldr	r1, [pc, #492]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024da:	4b76      	ldr	r3, [pc, #472]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e8:	4972      	ldr	r1, [pc, #456]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024fc:	4b6d      	ldr	r3, [pc, #436]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250a:	496a      	ldr	r1, [pc, #424]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800251e:	4b65      	ldr	r3, [pc, #404]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002524:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	4961      	ldr	r1, [pc, #388]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002540:	4b5c      	ldr	r3, [pc, #368]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254e:	4959      	ldr	r1, [pc, #356]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002562:	4b54      	ldr	r3, [pc, #336]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002568:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002570:	4950      	ldr	r1, [pc, #320]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002584:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002592:	4948      	ldr	r1, [pc, #288]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a6:	4b43      	ldr	r3, [pc, #268]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	493f      	ldr	r1, [pc, #252]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d028      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025c8:	4b3a      	ldr	r3, [pc, #232]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d6:	4937      	ldr	r1, [pc, #220]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025e6:	d106      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e8:	4b32      	ldr	r3, [pc, #200]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a31      	ldr	r2, [pc, #196]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025f2:	60d3      	str	r3, [r2, #12]
 80025f4:	e011      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025fe:	d10c      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f8c8 	bl	800279c <RCCEx_PLLSAI1_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d028      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002626:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002634:	491f      	ldr	r1, [pc, #124]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002644:	d106      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4a1a      	ldr	r2, [pc, #104]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002650:	60d3      	str	r3, [r2, #12]
 8002652:	e011      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800265c:	d10c      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3304      	adds	r3, #4
 8002662:	2101      	movs	r1, #1
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f899 	bl	800279c <RCCEx_PLLSAI1_Config>
 800266a:	4603      	mov	r3, r0
 800266c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02b      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002692:	4908      	ldr	r1, [pc, #32]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026a2:	d109      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a02      	ldr	r2, [pc, #8]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
 80026b0:	e014      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026c0:	d10c      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2101      	movs	r1, #1
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f867 	bl	800279c <RCCEx_PLLSAI1_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d02f      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026f6:	4928      	ldr	r1, [pc, #160]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002706:	d10d      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	2102      	movs	r1, #2
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f844 	bl	800279c <RCCEx_PLLSAI1_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d014      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	74bb      	strb	r3, [r7, #18]
 8002722:	e011      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800272c:	d10c      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3320      	adds	r3, #32
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f925 	bl	8002984 <RCCEx_PLLSAI2_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002754:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002762:	490d      	ldr	r1, [pc, #52]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002776:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002786:	4904      	ldr	r1, [pc, #16]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800278e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000

0800279c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027aa:	4b75      	ldr	r3, [pc, #468]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d018      	beq.n	80027e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027b6:	4b72      	ldr	r3, [pc, #456]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0203 	and.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d10d      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
       ||
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
       ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d047      	beq.n	8002872 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	e044      	b.n	8002872 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d018      	beq.n	8002822 <RCCEx_PLLSAI1_Config+0x86>
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d825      	bhi.n	8002840 <RCCEx_PLLSAI1_Config+0xa4>
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d002      	beq.n	80027fe <RCCEx_PLLSAI1_Config+0x62>
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d009      	beq.n	8002810 <RCCEx_PLLSAI1_Config+0x74>
 80027fc:	e020      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027fe:	4b60      	ldr	r3, [pc, #384]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11d      	bne.n	8002846 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280e:	e01a      	b.n	8002846 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002810:	4b5b      	ldr	r3, [pc, #364]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d116      	bne.n	800284a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002820:	e013      	b.n	800284a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002822:	4b57      	ldr	r3, [pc, #348]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800282e:	4b54      	ldr	r3, [pc, #336]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800283e:	e006      	b.n	800284e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e004      	b.n	8002850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002846:	bf00      	nop
 8002848:	e002      	b.n	8002850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800284a:	bf00      	nop
 800284c:	e000      	b.n	8002850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800284e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002856:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6819      	ldr	r1, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	430b      	orrs	r3, r1
 800286c:	4944      	ldr	r1, [pc, #272]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d17d      	bne.n	8002974 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002878:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a40      	ldr	r2, [pc, #256]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fe fb4a 	bl	8000f1c <HAL_GetTick>
 8002888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800288a:	e009      	b.n	80028a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800288c:	f7fe fb46 	bl	8000f1c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d902      	bls.n	80028a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	73fb      	strb	r3, [r7, #15]
        break;
 800289e:	e005      	b.n	80028ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028a0:	4b37      	ldr	r3, [pc, #220]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ef      	bne.n	800288c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d160      	bne.n	8002974 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b8:	4b31      	ldr	r3, [pc, #196]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6892      	ldr	r2, [r2, #8]
 80028c8:	0211      	lsls	r1, r2, #8
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68d2      	ldr	r2, [r2, #12]
 80028ce:	0912      	lsrs	r2, r2, #4
 80028d0:	0452      	lsls	r2, r2, #17
 80028d2:	430a      	orrs	r2, r1
 80028d4:	492a      	ldr	r1, [pc, #168]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	610b      	str	r3, [r1, #16]
 80028da:	e027      	b.n	800292c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d112      	bne.n	8002908 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e2:	4b27      	ldr	r3, [pc, #156]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6892      	ldr	r2, [r2, #8]
 80028f2:	0211      	lsls	r1, r2, #8
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6912      	ldr	r2, [r2, #16]
 80028f8:	0852      	lsrs	r2, r2, #1
 80028fa:	3a01      	subs	r2, #1
 80028fc:	0552      	lsls	r2, r2, #21
 80028fe:	430a      	orrs	r2, r1
 8002900:	491f      	ldr	r1, [pc, #124]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	610b      	str	r3, [r1, #16]
 8002906:	e011      	b.n	800292c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002908:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002910:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	0211      	lsls	r1, r2, #8
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6952      	ldr	r2, [r2, #20]
 800291e:	0852      	lsrs	r2, r2, #1
 8002920:	3a01      	subs	r2, #1
 8002922:	0652      	lsls	r2, r2, #25
 8002924:	430a      	orrs	r2, r1
 8002926:	4916      	ldr	r1, [pc, #88]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800292c:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a13      	ldr	r2, [pc, #76]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002936:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe faf0 	bl	8000f1c <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800293e:	e009      	b.n	8002954 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002940:	f7fe faec 	bl	8000f1c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d902      	bls.n	8002954 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	73fb      	strb	r3, [r7, #15]
          break;
 8002952:	e005      	b.n	8002960 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002954:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	4904      	ldr	r1, [pc, #16]	@ (8002980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000

08002984 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002992:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d018      	beq.n	80029d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800299e:	4b67      	ldr	r3, [pc, #412]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0203 	and.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d10d      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
       ||
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029b6:	4b61      	ldr	r3, [pc, #388]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
       ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d047      	beq.n	8002a5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	e044      	b.n	8002a5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d018      	beq.n	8002a0a <RCCEx_PLLSAI2_Config+0x86>
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d825      	bhi.n	8002a28 <RCCEx_PLLSAI2_Config+0xa4>
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d002      	beq.n	80029e6 <RCCEx_PLLSAI2_Config+0x62>
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d009      	beq.n	80029f8 <RCCEx_PLLSAI2_Config+0x74>
 80029e4:	e020      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029e6:	4b55      	ldr	r3, [pc, #340]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11d      	bne.n	8002a2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f6:	e01a      	b.n	8002a2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f8:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a08:	e013      	b.n	8002a32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a16:	4b49      	ldr	r3, [pc, #292]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a26:	e006      	b.n	8002a36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2c:	e004      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e002      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	430b      	orrs	r3, r1
 8002a54:	4939      	ldr	r1, [pc, #228]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d167      	bne.n	8002b30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a60:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a35      	ldr	r2, [pc, #212]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fa56 	bl	8000f1c <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a72:	e009      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a74:	f7fe fa52 	bl	8000f1c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d902      	bls.n	8002a88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	73fb      	strb	r3, [r7, #15]
        break;
 8002a86:	e005      	b.n	8002a94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a88:	4b2c      	ldr	r3, [pc, #176]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ef      	bne.n	8002a74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d14a      	bne.n	8002b30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d111      	bne.n	8002ac4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002aa0:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6892      	ldr	r2, [r2, #8]
 8002ab0:	0211      	lsls	r1, r2, #8
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	0912      	lsrs	r2, r2, #4
 8002ab8:	0452      	lsls	r2, r2, #17
 8002aba:	430a      	orrs	r2, r1
 8002abc:	491f      	ldr	r1, [pc, #124]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	614b      	str	r3, [r1, #20]
 8002ac2:	e011      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002acc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6892      	ldr	r2, [r2, #8]
 8002ad4:	0211      	lsls	r1, r2, #8
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6912      	ldr	r2, [r2, #16]
 8002ada:	0852      	lsrs	r2, r2, #1
 8002adc:	3a01      	subs	r2, #1
 8002ade:	0652      	lsls	r2, r2, #25
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	4916      	ldr	r1, [pc, #88]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a13      	ldr	r2, [pc, #76]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fa12 	bl	8000f1c <HAL_GetTick>
 8002af8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002afa:	e009      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002afc:	f7fe fa0e 	bl	8000f1c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d902      	bls.n	8002b10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b0e:	e005      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b10:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ef      	beq.n	8002afc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b22:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4904      	ldr	r1, [pc, #16]	@ (8002b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000

08002b40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d079      	beq.n	8002c46 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fd fe9a 	bl	80008a0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d058      	beq.n	8002c34 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	22ca      	movs	r2, #202	@ 0xca
 8002b88:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2253      	movs	r2, #83	@ 0x53
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa4e 	bl	8003034 <RTC_EnterInitMode>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d127      	bne.n	8002bf2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bb4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68d2      	ldr	r2, [r2, #12]
 8002bdc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	041a      	lsls	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa52 	bl	800309c <RTC_ExitInitMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0203 	bic.w	r2, r2, #3
 8002c10:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	22ff      	movs	r2, #255	@ 0xff
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c32:	e001      	b.n	8002c38 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_RTC_SetTime+0x1a>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e08b      	b.n	8002d82 <HAL_RTC_SetTime+0x132>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	22ca      	movs	r2, #202	@ 0xca
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2253      	movs	r2, #83	@ 0x53
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f9d2 	bl	8003034 <RTC_EnterInitMode>
 8002c90:	4603      	mov	r3, r0
 8002c92:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d163      	bne.n	8002d62 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d126      	bne.n	8002cee <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fa2d 	bl	8003118 <RTC_ByteToBcd2>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fa26 	bl	8003118 <RTC_ByteToBcd2>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cd0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	789b      	ldrb	r3, [r3, #2]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fa1e 	bl	8003118 <RTC_ByteToBcd2>
 8002cdc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cde:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e018      	b.n	8002d20 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d0e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d14:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	78db      	ldrb	r3, [r3, #3]
 8002d1a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002d2a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002d2e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d3e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f99f 	bl	800309c <RTC_ExitInitMode>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	22ff      	movs	r2, #255	@ 0xff
 8002d68:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d103      	bne.n	8002d78 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}

08002d8a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002db8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	0d9b      	lsrs	r3, r3, #22
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11a      	bne.n	8002e38 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f9a6 	bl	8003158 <RTC_Bcd2ToByte>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f99d 	bl	8003158 <RTC_Bcd2ToByte>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	789b      	ldrb	r3, [r3, #2]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f994 	bl	8003158 <RTC_Bcd2ToByte>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e42:	b590      	push	{r4, r7, lr}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_RTC_SetDate+0x1a>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e075      	b.n	8002f48 <HAL_RTC_SetDate+0x106>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10e      	bne.n	8002e90 <HAL_RTC_SetDate+0x4e>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	f023 0310 	bic.w	r3, r3, #16
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	330a      	adds	r3, #10
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	78db      	ldrb	r3, [r3, #3]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f93c 	bl	8003118 <RTC_ByteToBcd2>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f935 	bl	8003118 <RTC_ByteToBcd2>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002eb2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	789b      	ldrb	r3, [r3, #2]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f92d 	bl	8003118 <RTC_ByteToBcd2>
 8002ebe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ec0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e00e      	b.n	8002eee <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	78db      	ldrb	r3, [r3, #3]
 8002ed4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002edc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ee2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	22ca      	movs	r2, #202	@ 0xca
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2253      	movs	r2, #83	@ 0x53
 8002efc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f898 	bl	8003034 <RTC_EnterInitMode>
 8002f04:	4603      	mov	r3, r0
 8002f06:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002f1c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f8bc 	bl	800309c <RTC_ExitInitMode>
 8002f24:	4603      	mov	r3, r0
 8002f26:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	22ff      	movs	r2, #255	@ 0xff
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}

08002f50 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f66:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	78db      	ldrb	r3, [r3, #3]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f8d2 	bl	8003158 <RTC_Bcd2ToByte>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	785b      	ldrb	r3, [r3, #1]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f8c9 	bl	8003158 <RTC_Bcd2ToByte>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	789b      	ldrb	r3, [r3, #2]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f8c0 	bl	8003158 <RTC_Bcd2ToByte>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <HAL_RTC_WaitForSynchro+0x44>)
 8002ffa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002ffc:	f7fd ff8e 	bl	8000f1c <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003002:	e009      	b.n	8003018 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003004:	f7fd ff8a 	bl	8000f1c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003012:	d901      	bls.n	8003018 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e007      	b.n	8003028 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	0003ff5f 	.word	0x0003ff5f

08003034 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d120      	bne.n	8003090 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003056:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003058:	f7fd ff60 	bl	8000f1c <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800305e:	e00d      	b.n	800307c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003060:	f7fd ff5c 	bl	8000f1c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800306e:	d905      	bls.n	800307c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2203      	movs	r2, #3
 8003078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <RTC_EnterInitMode+0x5c>
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d1e7      	bne.n	8003060 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80030a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <RTC_ExitInitMode+0x78>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a19      	ldr	r2, [pc, #100]	@ (8003114 <RTC_ExitInitMode+0x78>)
 80030ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030b2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <RTC_ExitInitMode+0x78>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10c      	bne.n	80030da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff93 	bl	8002fec <HAL_RTC_WaitForSynchro>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01e      	beq.n	800310a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2203      	movs	r2, #3
 80030d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e017      	b.n	800310a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030da:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <RTC_ExitInitMode+0x78>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4a0d      	ldr	r2, [pc, #52]	@ (8003114 <RTC_ExitInitMode+0x78>)
 80030e0:	f023 0320 	bic.w	r3, r3, #32
 80030e4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff ff80 	bl	8002fec <HAL_RTC_WaitForSynchro>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2203      	movs	r2, #3
 80030f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030fe:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <RTC_ExitInitMode+0x78>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <RTC_ExitInitMode+0x78>)
 8003104:	f043 0320 	orr.w	r3, r3, #32
 8003108:	6093      	str	r3, [r2, #8]
  }

  return status;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40002800 	.word	0x40002800

08003118 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800312a:	e005      	b.n	8003138 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003132:	7afb      	ldrb	r3, [r7, #11]
 8003134:	3b0a      	subs	r3, #10
 8003136:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003138:	7afb      	ldrb	r3, [r7, #11]
 800313a:	2b09      	cmp	r3, #9
 800313c:	d8f6      	bhi.n	800312c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	b2da      	uxtb	r2, r3
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	4313      	orrs	r3, r2
 800314a:	b2db      	uxtb	r3, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4413      	add	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	b2da      	uxtb	r2, r3
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	4413      	add	r3, r2
 800317e:	b2db      	uxtb	r3, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e034      	b.n	800320e <HAL_RTCEx_SetCalibrationOutPut+0x82>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	22ca      	movs	r2, #202	@ 0xca
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2253      	movs	r2, #83	@ 0x53
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80031d2:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80031f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	22ff      	movs	r2, #255	@ 0xff
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_RTCEx_SetRefClock+0x16>
 800322c:	2302      	movs	r3, #2
 800322e:	e034      	b.n	800329a <HAL_RTCEx_SetRefClock+0x80>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22ca      	movs	r2, #202	@ 0xca
 8003246:	625a      	str	r2, [r3, #36]	@ 0x24
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2253      	movs	r2, #83	@ 0x53
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff feef 	bl	8003034 <RTC_EnterInitMode>
 8003256:	4603      	mov	r3, r0
 8003258:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0210 	orr.w	r2, r2, #16
 800326e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff13 	bl	800309c <RTC_ExitInitMode>
 8003276:	4603      	mov	r3, r0
 8003278:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	22ff      	movs	r2, #255	@ 0xff
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b087      	sub	sp, #28
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3350      	adds	r3, #80	@ 0x50
 80032b4:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	009a      	lsls	r2, r3, #2
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4413      	add	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	461a      	mov	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e040      	b.n	8003368 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fd1a 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	@ 0x24
 8003300:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fae0 	bl	80038e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f825 	bl	8003370 <UART_SetConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e01b      	b.n	8003368 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800333e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800334e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fb5f 	bl	8003a24 <UART_CheckIdleState>
 8003366:	4603      	mov	r3, r0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b08a      	sub	sp, #40	@ 0x28
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	431a      	orrs	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4313      	orrs	r3, r2
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4ba4      	ldr	r3, [pc, #656]	@ (8003630 <UART_SetConfig+0x2c0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a99      	ldr	r2, [pc, #612]	@ (8003634 <UART_SetConfig+0x2c4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d8:	4313      	orrs	r3, r2
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ec:	430a      	orrs	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a90      	ldr	r2, [pc, #576]	@ (8003638 <UART_SetConfig+0x2c8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d126      	bne.n	8003448 <UART_SetConfig+0xd8>
 80033fa:	4b90      	ldr	r3, [pc, #576]	@ (800363c <UART_SetConfig+0x2cc>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b03      	cmp	r3, #3
 8003406:	d81b      	bhi.n	8003440 <UART_SetConfig+0xd0>
 8003408:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <UART_SetConfig+0xa0>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003431 	.word	0x08003431
 8003418:	08003429 	.word	0x08003429
 800341c:	08003439 	.word	0x08003439
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003426:	e116      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003428:	2302      	movs	r3, #2
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342e:	e112      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003430:	2304      	movs	r3, #4
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003436:	e10e      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003438:	2308      	movs	r3, #8
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343e:	e10a      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003440:	2310      	movs	r3, #16
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003446:	e106      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7c      	ldr	r2, [pc, #496]	@ (8003640 <UART_SetConfig+0x2d0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d138      	bne.n	80034c4 <UART_SetConfig+0x154>
 8003452:	4b7a      	ldr	r3, [pc, #488]	@ (800363c <UART_SetConfig+0x2cc>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d82d      	bhi.n	80034bc <UART_SetConfig+0x14c>
 8003460:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <UART_SetConfig+0xf8>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	0800349d 	.word	0x0800349d
 800346c:	080034bd 	.word	0x080034bd
 8003470:	080034bd 	.word	0x080034bd
 8003474:	080034bd 	.word	0x080034bd
 8003478:	080034ad 	.word	0x080034ad
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034bd 	.word	0x080034bd
 8003484:	080034bd 	.word	0x080034bd
 8003488:	080034a5 	.word	0x080034a5
 800348c:	080034bd 	.word	0x080034bd
 8003490:	080034bd 	.word	0x080034bd
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034b5 	.word	0x080034b5
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a2:	e0d8      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034a4:	2302      	movs	r3, #2
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034aa:	e0d4      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034ac:	2304      	movs	r3, #4
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b2:	e0d0      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034b4:	2308      	movs	r3, #8
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ba:	e0cc      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034bc:	2310      	movs	r3, #16
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c2:	e0c8      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003644 <UART_SetConfig+0x2d4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d125      	bne.n	800351a <UART_SetConfig+0x1aa>
 80034ce:	4b5b      	ldr	r3, [pc, #364]	@ (800363c <UART_SetConfig+0x2cc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034d8:	2b30      	cmp	r3, #48	@ 0x30
 80034da:	d016      	beq.n	800350a <UART_SetConfig+0x19a>
 80034dc:	2b30      	cmp	r3, #48	@ 0x30
 80034de:	d818      	bhi.n	8003512 <UART_SetConfig+0x1a2>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d00a      	beq.n	80034fa <UART_SetConfig+0x18a>
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d814      	bhi.n	8003512 <UART_SetConfig+0x1a2>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <UART_SetConfig+0x182>
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d008      	beq.n	8003502 <UART_SetConfig+0x192>
 80034f0:	e00f      	b.n	8003512 <UART_SetConfig+0x1a2>
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f8:	e0ad      	b.n	8003656 <UART_SetConfig+0x2e6>
 80034fa:	2302      	movs	r3, #2
 80034fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003500:	e0a9      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003502:	2304      	movs	r3, #4
 8003504:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003508:	e0a5      	b.n	8003656 <UART_SetConfig+0x2e6>
 800350a:	2308      	movs	r3, #8
 800350c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003510:	e0a1      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003512:	2310      	movs	r3, #16
 8003514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003518:	e09d      	b.n	8003656 <UART_SetConfig+0x2e6>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4a      	ldr	r2, [pc, #296]	@ (8003648 <UART_SetConfig+0x2d8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <UART_SetConfig+0x200>
 8003524:	4b45      	ldr	r3, [pc, #276]	@ (800363c <UART_SetConfig+0x2cc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800352e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003530:	d016      	beq.n	8003560 <UART_SetConfig+0x1f0>
 8003532:	2bc0      	cmp	r3, #192	@ 0xc0
 8003534:	d818      	bhi.n	8003568 <UART_SetConfig+0x1f8>
 8003536:	2b80      	cmp	r3, #128	@ 0x80
 8003538:	d00a      	beq.n	8003550 <UART_SetConfig+0x1e0>
 800353a:	2b80      	cmp	r3, #128	@ 0x80
 800353c:	d814      	bhi.n	8003568 <UART_SetConfig+0x1f8>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <UART_SetConfig+0x1d8>
 8003542:	2b40      	cmp	r3, #64	@ 0x40
 8003544:	d008      	beq.n	8003558 <UART_SetConfig+0x1e8>
 8003546:	e00f      	b.n	8003568 <UART_SetConfig+0x1f8>
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354e:	e082      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003550:	2302      	movs	r3, #2
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003556:	e07e      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003558:	2304      	movs	r3, #4
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800355e:	e07a      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003560:	2308      	movs	r3, #8
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003566:	e076      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003568:	2310      	movs	r3, #16
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800356e:	e072      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a35      	ldr	r2, [pc, #212]	@ (800364c <UART_SetConfig+0x2dc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d12a      	bne.n	80035d0 <UART_SetConfig+0x260>
 800357a:	4b30      	ldr	r3, [pc, #192]	@ (800363c <UART_SetConfig+0x2cc>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003588:	d01a      	beq.n	80035c0 <UART_SetConfig+0x250>
 800358a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800358e:	d81b      	bhi.n	80035c8 <UART_SetConfig+0x258>
 8003590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003594:	d00c      	beq.n	80035b0 <UART_SetConfig+0x240>
 8003596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359a:	d815      	bhi.n	80035c8 <UART_SetConfig+0x258>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <UART_SetConfig+0x238>
 80035a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a4:	d008      	beq.n	80035b8 <UART_SetConfig+0x248>
 80035a6:	e00f      	b.n	80035c8 <UART_SetConfig+0x258>
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ae:	e052      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035b0:	2302      	movs	r3, #2
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b6:	e04e      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035b8:	2304      	movs	r3, #4
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035be:	e04a      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035c0:	2308      	movs	r3, #8
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c6:	e046      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035c8:	2310      	movs	r3, #16
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ce:	e042      	b.n	8003656 <UART_SetConfig+0x2e6>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a17      	ldr	r2, [pc, #92]	@ (8003634 <UART_SetConfig+0x2c4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d13a      	bne.n	8003650 <UART_SetConfig+0x2e0>
 80035da:	4b18      	ldr	r3, [pc, #96]	@ (800363c <UART_SetConfig+0x2cc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035e8:	d01a      	beq.n	8003620 <UART_SetConfig+0x2b0>
 80035ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035ee:	d81b      	bhi.n	8003628 <UART_SetConfig+0x2b8>
 80035f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f4:	d00c      	beq.n	8003610 <UART_SetConfig+0x2a0>
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035fa:	d815      	bhi.n	8003628 <UART_SetConfig+0x2b8>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <UART_SetConfig+0x298>
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003604:	d008      	beq.n	8003618 <UART_SetConfig+0x2a8>
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x2b8>
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360e:	e022      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003610:	2302      	movs	r3, #2
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003616:	e01e      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003618:	2304      	movs	r3, #4
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361e:	e01a      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003620:	2308      	movs	r3, #8
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003626:	e016      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003628:	2310      	movs	r3, #16
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800362e:	e012      	b.n	8003656 <UART_SetConfig+0x2e6>
 8003630:	efff69f3 	.word	0xefff69f3
 8003634:	40008000 	.word	0x40008000
 8003638:	40013800 	.word	0x40013800
 800363c:	40021000 	.word	0x40021000
 8003640:	40004400 	.word	0x40004400
 8003644:	40004800 	.word	0x40004800
 8003648:	40004c00 	.word	0x40004c00
 800364c:	40005000 	.word	0x40005000
 8003650:	2310      	movs	r3, #16
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a9f      	ldr	r2, [pc, #636]	@ (80038d8 <UART_SetConfig+0x568>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d17a      	bne.n	8003756 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003664:	2b08      	cmp	r3, #8
 8003666:	d824      	bhi.n	80036b2 <UART_SetConfig+0x342>
 8003668:	a201      	add	r2, pc, #4	@ (adr r2, 8003670 <UART_SetConfig+0x300>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003695 	.word	0x08003695
 8003674:	080036b3 	.word	0x080036b3
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036b3 	.word	0x080036b3
 8003680:	080036a3 	.word	0x080036a3
 8003684:	080036b3 	.word	0x080036b3
 8003688:	080036b3 	.word	0x080036b3
 800368c:	080036b3 	.word	0x080036b3
 8003690:	080036ab 	.word	0x080036ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7fe fd0c 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8003698:	61f8      	str	r0, [r7, #28]
        break;
 800369a:	e010      	b.n	80036be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369c:	4b8f      	ldr	r3, [pc, #572]	@ (80038dc <UART_SetConfig+0x56c>)
 800369e:	61fb      	str	r3, [r7, #28]
        break;
 80036a0:	e00d      	b.n	80036be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a2:	f7fe fc6d 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 80036a6:	61f8      	str	r0, [r7, #28]
        break;
 80036a8:	e009      	b.n	80036be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ae:	61fb      	str	r3, [r7, #28]
        break;
 80036b0:	e005      	b.n	80036be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80fb 	beq.w	80038bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d305      	bcc.n	80036e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d903      	bls.n	80036ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036e8:	e0e8      	b.n	80038bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2200      	movs	r2, #0
 80036ee:	461c      	mov	r4, r3
 80036f0:	4615      	mov	r5, r2
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	022b      	lsls	r3, r5, #8
 80036fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003700:	0222      	lsls	r2, r4, #8
 8003702:	68f9      	ldr	r1, [r7, #12]
 8003704:	6849      	ldr	r1, [r1, #4]
 8003706:	0849      	lsrs	r1, r1, #1
 8003708:	2000      	movs	r0, #0
 800370a:	4688      	mov	r8, r1
 800370c:	4681      	mov	r9, r0
 800370e:	eb12 0a08 	adds.w	sl, r2, r8
 8003712:	eb43 0b09 	adc.w	fp, r3, r9
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003724:	4650      	mov	r0, sl
 8003726:	4659      	mov	r1, fp
 8003728:	f7fc fda2 	bl	8000270 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800373a:	d308      	bcc.n	800374e <UART_SetConfig+0x3de>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003742:	d204      	bcs.n	800374e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	e0b6      	b.n	80038bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003754:	e0b2      	b.n	80038bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375e:	d15e      	bne.n	800381e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003760:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003764:	2b08      	cmp	r3, #8
 8003766:	d828      	bhi.n	80037ba <UART_SetConfig+0x44a>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <UART_SetConfig+0x400>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037bb 	.word	0x080037bb
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037bb 	.word	0x080037bb
 8003788:	080037bb 	.word	0x080037bb
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fe fc8c 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8003798:	61f8      	str	r0, [r7, #28]
        break;
 800379a:	e014      	b.n	80037c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7fe fc9e 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 80037a0:	61f8      	str	r0, [r7, #28]
        break;
 80037a2:	e010      	b.n	80037c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b4d      	ldr	r3, [pc, #308]	@ (80038dc <UART_SetConfig+0x56c>)
 80037a6:	61fb      	str	r3, [r7, #28]
        break;
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7fe fbe9 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 80037ae:	61f8      	str	r0, [r7, #28]
        break;
 80037b0:	e009      	b.n	80037c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b6:	61fb      	str	r3, [r7, #28]
        break;
 80037b8:	e005      	b.n	80037c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d077      	beq.n	80038bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005a      	lsls	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b0f      	cmp	r3, #15
 80037e6:	d916      	bls.n	8003816 <UART_SetConfig+0x4a6>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ee:	d212      	bcs.n	8003816 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f023 030f 	bic.w	r3, r3, #15
 80037f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	b29a      	uxth	r2, r3
 8003806:	8afb      	ldrh	r3, [r7, #22]
 8003808:	4313      	orrs	r3, r2
 800380a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	8afa      	ldrh	r2, [r7, #22]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	e052      	b.n	80038bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800381c:	e04e      	b.n	80038bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800381e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003822:	2b08      	cmp	r3, #8
 8003824:	d827      	bhi.n	8003876 <UART_SetConfig+0x506>
 8003826:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <UART_SetConfig+0x4bc>)
 8003828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382c:	08003851 	.word	0x08003851
 8003830:	08003859 	.word	0x08003859
 8003834:	08003861 	.word	0x08003861
 8003838:	08003877 	.word	0x08003877
 800383c:	08003867 	.word	0x08003867
 8003840:	08003877 	.word	0x08003877
 8003844:	08003877 	.word	0x08003877
 8003848:	08003877 	.word	0x08003877
 800384c:	0800386f 	.word	0x0800386f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003850:	f7fe fc2e 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8003854:	61f8      	str	r0, [r7, #28]
        break;
 8003856:	e014      	b.n	8003882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003858:	f7fe fc40 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 800385c:	61f8      	str	r0, [r7, #28]
        break;
 800385e:	e010      	b.n	8003882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003860:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <UART_SetConfig+0x56c>)
 8003862:	61fb      	str	r3, [r7, #28]
        break;
 8003864:	e00d      	b.n	8003882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003866:	f7fe fb8b 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 800386a:	61f8      	str	r0, [r7, #28]
        break;
 800386c:	e009      	b.n	8003882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800386e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003872:	61fb      	str	r3, [r7, #28]
        break;
 8003874:	e005      	b.n	8003882 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003880:	bf00      	nop
    }

    if (pclk != 0U)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d019      	beq.n	80038bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	085a      	lsrs	r2, r3, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	441a      	add	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b0f      	cmp	r3, #15
 80038a0:	d909      	bls.n	80038b6 <UART_SetConfig+0x546>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a8:	d205      	bcs.n	80038b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	e002      	b.n	80038bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	@ 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d6:	bf00      	nop
 80038d8:	40008000 	.word	0x40008000
 80038dc:	00f42400 	.word	0x00f42400

080038e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039de:	d10a      	bne.n	80039f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b098      	sub	sp, #96	@ 0x60
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a34:	f7fd fa72 	bl	8000f1c <HAL_GetTick>
 8003a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d12e      	bne.n	8003aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f88c 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d021      	beq.n	8003aa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e6      	bne.n	8003a62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e062      	b.n	8003b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d149      	bne.n	8003b48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003abc:	2200      	movs	r2, #0
 8003abe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f856 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d03c      	beq.n	8003b48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	623b      	str	r3, [r7, #32]
   return(result);
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e6      	bne.n	8003ace <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b20:	61fa      	str	r2, [r7, #28]
 8003b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e5      	bne.n	8003b00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e011      	b.n	8003b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3758      	adds	r7, #88	@ 0x58
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b84:	e049      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b8c:	d045      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fd f9c5 	bl	8000f1c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e048      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d031      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d110      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f838 	bl	8003c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e029      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf4:	d111      	bne.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f81e 	bl	8003c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0a6      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b095      	sub	sp, #84	@ 0x54
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e6      	bne.n	8003c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3308      	adds	r3, #8
 8003c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d118      	bne.n	8003cea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 0310 	bic.w	r3, r3, #16
 8003ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6979      	ldr	r1, [r7, #20]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cfe:	bf00      	nop
 8003d00:	3754      	adds	r7, #84	@ 0x54
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <__sflush_r>:
 8003d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d14:	0716      	lsls	r6, r2, #28
 8003d16:	4605      	mov	r5, r0
 8003d18:	460c      	mov	r4, r1
 8003d1a:	d454      	bmi.n	8003dc6 <__sflush_r+0xba>
 8003d1c:	684b      	ldr	r3, [r1, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	dc02      	bgt.n	8003d28 <__sflush_r+0x1c>
 8003d22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	dd48      	ble.n	8003dba <__sflush_r+0xae>
 8003d28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d2a:	2e00      	cmp	r6, #0
 8003d2c:	d045      	beq.n	8003dba <__sflush_r+0xae>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003d34:	682f      	ldr	r7, [r5, #0]
 8003d36:	6a21      	ldr	r1, [r4, #32]
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	d030      	beq.n	8003d9e <__sflush_r+0x92>
 8003d3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	0759      	lsls	r1, r3, #29
 8003d42:	d505      	bpl.n	8003d50 <__sflush_r+0x44>
 8003d44:	6863      	ldr	r3, [r4, #4]
 8003d46:	1ad2      	subs	r2, r2, r3
 8003d48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d4a:	b10b      	cbz	r3, 8003d50 <__sflush_r+0x44>
 8003d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	2300      	movs	r3, #0
 8003d52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d54:	6a21      	ldr	r1, [r4, #32]
 8003d56:	4628      	mov	r0, r5
 8003d58:	47b0      	blx	r6
 8003d5a:	1c43      	adds	r3, r0, #1
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	d106      	bne.n	8003d6e <__sflush_r+0x62>
 8003d60:	6829      	ldr	r1, [r5, #0]
 8003d62:	291d      	cmp	r1, #29
 8003d64:	d82b      	bhi.n	8003dbe <__sflush_r+0xb2>
 8003d66:	4a2a      	ldr	r2, [pc, #168]	@ (8003e10 <__sflush_r+0x104>)
 8003d68:	410a      	asrs	r2, r1
 8003d6a:	07d6      	lsls	r6, r2, #31
 8003d6c:	d427      	bmi.n	8003dbe <__sflush_r+0xb2>
 8003d6e:	2200      	movs	r2, #0
 8003d70:	6062      	str	r2, [r4, #4]
 8003d72:	04d9      	lsls	r1, r3, #19
 8003d74:	6922      	ldr	r2, [r4, #16]
 8003d76:	6022      	str	r2, [r4, #0]
 8003d78:	d504      	bpl.n	8003d84 <__sflush_r+0x78>
 8003d7a:	1c42      	adds	r2, r0, #1
 8003d7c:	d101      	bne.n	8003d82 <__sflush_r+0x76>
 8003d7e:	682b      	ldr	r3, [r5, #0]
 8003d80:	b903      	cbnz	r3, 8003d84 <__sflush_r+0x78>
 8003d82:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d86:	602f      	str	r7, [r5, #0]
 8003d88:	b1b9      	cbz	r1, 8003dba <__sflush_r+0xae>
 8003d8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d8e:	4299      	cmp	r1, r3
 8003d90:	d002      	beq.n	8003d98 <__sflush_r+0x8c>
 8003d92:	4628      	mov	r0, r5
 8003d94:	f000 fa2e 	bl	80041f4 <_free_r>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d9c:	e00d      	b.n	8003dba <__sflush_r+0xae>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	4628      	mov	r0, r5
 8003da2:	47b0      	blx	r6
 8003da4:	4602      	mov	r2, r0
 8003da6:	1c50      	adds	r0, r2, #1
 8003da8:	d1c9      	bne.n	8003d3e <__sflush_r+0x32>
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0c6      	beq.n	8003d3e <__sflush_r+0x32>
 8003db0:	2b1d      	cmp	r3, #29
 8003db2:	d001      	beq.n	8003db8 <__sflush_r+0xac>
 8003db4:	2b16      	cmp	r3, #22
 8003db6:	d11e      	bne.n	8003df6 <__sflush_r+0xea>
 8003db8:	602f      	str	r7, [r5, #0]
 8003dba:	2000      	movs	r0, #0
 8003dbc:	e022      	b.n	8003e04 <__sflush_r+0xf8>
 8003dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dc2:	b21b      	sxth	r3, r3
 8003dc4:	e01b      	b.n	8003dfe <__sflush_r+0xf2>
 8003dc6:	690f      	ldr	r7, [r1, #16]
 8003dc8:	2f00      	cmp	r7, #0
 8003dca:	d0f6      	beq.n	8003dba <__sflush_r+0xae>
 8003dcc:	0793      	lsls	r3, r2, #30
 8003dce:	680e      	ldr	r6, [r1, #0]
 8003dd0:	bf08      	it	eq
 8003dd2:	694b      	ldreq	r3, [r1, #20]
 8003dd4:	600f      	str	r7, [r1, #0]
 8003dd6:	bf18      	it	ne
 8003dd8:	2300      	movne	r3, #0
 8003dda:	eba6 0807 	sub.w	r8, r6, r7
 8003dde:	608b      	str	r3, [r1, #8]
 8003de0:	f1b8 0f00 	cmp.w	r8, #0
 8003de4:	dde9      	ble.n	8003dba <__sflush_r+0xae>
 8003de6:	6a21      	ldr	r1, [r4, #32]
 8003de8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003dea:	4643      	mov	r3, r8
 8003dec:	463a      	mov	r2, r7
 8003dee:	4628      	mov	r0, r5
 8003df0:	47b0      	blx	r6
 8003df2:	2800      	cmp	r0, #0
 8003df4:	dc08      	bgt.n	8003e08 <__sflush_r+0xfc>
 8003df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dfe:	81a3      	strh	r3, [r4, #12]
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e08:	4407      	add	r7, r0
 8003e0a:	eba8 0800 	sub.w	r8, r8, r0
 8003e0e:	e7e7      	b.n	8003de0 <__sflush_r+0xd4>
 8003e10:	dfbffffe 	.word	0xdfbffffe

08003e14 <_fflush_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	690b      	ldr	r3, [r1, #16]
 8003e18:	4605      	mov	r5, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	b913      	cbnz	r3, 8003e24 <_fflush_r+0x10>
 8003e1e:	2500      	movs	r5, #0
 8003e20:	4628      	mov	r0, r5
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	b118      	cbz	r0, 8003e2e <_fflush_r+0x1a>
 8003e26:	6a03      	ldr	r3, [r0, #32]
 8003e28:	b90b      	cbnz	r3, 8003e2e <_fflush_r+0x1a>
 8003e2a:	f000 f8bb 	bl	8003fa4 <__sinit>
 8003e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f3      	beq.n	8003e1e <_fflush_r+0xa>
 8003e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e38:	07d0      	lsls	r0, r2, #31
 8003e3a:	d404      	bmi.n	8003e46 <_fflush_r+0x32>
 8003e3c:	0599      	lsls	r1, r3, #22
 8003e3e:	d402      	bmi.n	8003e46 <_fflush_r+0x32>
 8003e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e42:	f000 f9d4 	bl	80041ee <__retarget_lock_acquire_recursive>
 8003e46:	4628      	mov	r0, r5
 8003e48:	4621      	mov	r1, r4
 8003e4a:	f7ff ff5f 	bl	8003d0c <__sflush_r>
 8003e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e50:	07da      	lsls	r2, r3, #31
 8003e52:	4605      	mov	r5, r0
 8003e54:	d4e4      	bmi.n	8003e20 <_fflush_r+0xc>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	059b      	lsls	r3, r3, #22
 8003e5a:	d4e1      	bmi.n	8003e20 <_fflush_r+0xc>
 8003e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e5e:	f000 f9c7 	bl	80041f0 <__retarget_lock_release_recursive>
 8003e62:	e7dd      	b.n	8003e20 <_fflush_r+0xc>

08003e64 <fflush>:
 8003e64:	4601      	mov	r1, r0
 8003e66:	b920      	cbnz	r0, 8003e72 <fflush+0xe>
 8003e68:	4a04      	ldr	r2, [pc, #16]	@ (8003e7c <fflush+0x18>)
 8003e6a:	4905      	ldr	r1, [pc, #20]	@ (8003e80 <fflush+0x1c>)
 8003e6c:	4805      	ldr	r0, [pc, #20]	@ (8003e84 <fflush+0x20>)
 8003e6e:	f000 b8b1 	b.w	8003fd4 <_fwalk_sglue>
 8003e72:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <fflush+0x24>)
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	f7ff bfcd 	b.w	8003e14 <_fflush_r>
 8003e7a:	bf00      	nop
 8003e7c:	2000000c 	.word	0x2000000c
 8003e80:	08003e15 	.word	0x08003e15
 8003e84:	2000001c 	.word	0x2000001c
 8003e88:	20000018 	.word	0x20000018

08003e8c <std>:
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	4604      	mov	r4, r0
 8003e92:	e9c0 3300 	strd	r3, r3, [r0]
 8003e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e9a:	6083      	str	r3, [r0, #8]
 8003e9c:	8181      	strh	r1, [r0, #12]
 8003e9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ea0:	81c2      	strh	r2, [r0, #14]
 8003ea2:	6183      	str	r3, [r0, #24]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	305c      	adds	r0, #92	@ 0x5c
 8003eaa:	f000 f926 	bl	80040fa <memset>
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <std+0x58>)
 8003eb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <std+0x5c>)
 8003eb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003eec <std+0x60>)
 8003eb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef0 <std+0x64>)
 8003ebc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <std+0x68>)
 8003ec0:	6224      	str	r4, [r4, #32]
 8003ec2:	429c      	cmp	r4, r3
 8003ec4:	d006      	beq.n	8003ed4 <std+0x48>
 8003ec6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003eca:	4294      	cmp	r4, r2
 8003ecc:	d002      	beq.n	8003ed4 <std+0x48>
 8003ece:	33d0      	adds	r3, #208	@ 0xd0
 8003ed0:	429c      	cmp	r4, r3
 8003ed2:	d105      	bne.n	8003ee0 <std+0x54>
 8003ed4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003edc:	f000 b986 	b.w	80041ec <__retarget_lock_init_recursive>
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	bf00      	nop
 8003ee4:	08004075 	.word	0x08004075
 8003ee8:	08004097 	.word	0x08004097
 8003eec:	080040cf 	.word	0x080040cf
 8003ef0:	080040f3 	.word	0x080040f3
 8003ef4:	20000138 	.word	0x20000138

08003ef8 <stdio_exit_handler>:
 8003ef8:	4a02      	ldr	r2, [pc, #8]	@ (8003f04 <stdio_exit_handler+0xc>)
 8003efa:	4903      	ldr	r1, [pc, #12]	@ (8003f08 <stdio_exit_handler+0x10>)
 8003efc:	4803      	ldr	r0, [pc, #12]	@ (8003f0c <stdio_exit_handler+0x14>)
 8003efe:	f000 b869 	b.w	8003fd4 <_fwalk_sglue>
 8003f02:	bf00      	nop
 8003f04:	2000000c 	.word	0x2000000c
 8003f08:	08003e15 	.word	0x08003e15
 8003f0c:	2000001c 	.word	0x2000001c

08003f10 <cleanup_stdio>:
 8003f10:	6841      	ldr	r1, [r0, #4]
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <cleanup_stdio+0x34>)
 8003f14:	4299      	cmp	r1, r3
 8003f16:	b510      	push	{r4, lr}
 8003f18:	4604      	mov	r4, r0
 8003f1a:	d001      	beq.n	8003f20 <cleanup_stdio+0x10>
 8003f1c:	f7ff ff7a 	bl	8003e14 <_fflush_r>
 8003f20:	68a1      	ldr	r1, [r4, #8]
 8003f22:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <cleanup_stdio+0x38>)
 8003f24:	4299      	cmp	r1, r3
 8003f26:	d002      	beq.n	8003f2e <cleanup_stdio+0x1e>
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff ff73 	bl	8003e14 <_fflush_r>
 8003f2e:	68e1      	ldr	r1, [r4, #12]
 8003f30:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <cleanup_stdio+0x3c>)
 8003f32:	4299      	cmp	r1, r3
 8003f34:	d004      	beq.n	8003f40 <cleanup_stdio+0x30>
 8003f36:	4620      	mov	r0, r4
 8003f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f3c:	f7ff bf6a 	b.w	8003e14 <_fflush_r>
 8003f40:	bd10      	pop	{r4, pc}
 8003f42:	bf00      	nop
 8003f44:	20000138 	.word	0x20000138
 8003f48:	200001a0 	.word	0x200001a0
 8003f4c:	20000208 	.word	0x20000208

08003f50 <global_stdio_init.part.0>:
 8003f50:	b510      	push	{r4, lr}
 8003f52:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <global_stdio_init.part.0+0x30>)
 8003f54:	4c0b      	ldr	r4, [pc, #44]	@ (8003f84 <global_stdio_init.part.0+0x34>)
 8003f56:	4a0c      	ldr	r2, [pc, #48]	@ (8003f88 <global_stdio_init.part.0+0x38>)
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2104      	movs	r1, #4
 8003f60:	f7ff ff94 	bl	8003e8c <std>
 8003f64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2109      	movs	r1, #9
 8003f6c:	f7ff ff8e 	bl	8003e8c <std>
 8003f70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f74:	2202      	movs	r2, #2
 8003f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f7a:	2112      	movs	r1, #18
 8003f7c:	f7ff bf86 	b.w	8003e8c <std>
 8003f80:	20000270 	.word	0x20000270
 8003f84:	20000138 	.word	0x20000138
 8003f88:	08003ef9 	.word	0x08003ef9

08003f8c <__sfp_lock_acquire>:
 8003f8c:	4801      	ldr	r0, [pc, #4]	@ (8003f94 <__sfp_lock_acquire+0x8>)
 8003f8e:	f000 b92e 	b.w	80041ee <__retarget_lock_acquire_recursive>
 8003f92:	bf00      	nop
 8003f94:	20000279 	.word	0x20000279

08003f98 <__sfp_lock_release>:
 8003f98:	4801      	ldr	r0, [pc, #4]	@ (8003fa0 <__sfp_lock_release+0x8>)
 8003f9a:	f000 b929 	b.w	80041f0 <__retarget_lock_release_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	20000279 	.word	0x20000279

08003fa4 <__sinit>:
 8003fa4:	b510      	push	{r4, lr}
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	f7ff fff0 	bl	8003f8c <__sfp_lock_acquire>
 8003fac:	6a23      	ldr	r3, [r4, #32]
 8003fae:	b11b      	cbz	r3, 8003fb8 <__sinit+0x14>
 8003fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb4:	f7ff bff0 	b.w	8003f98 <__sfp_lock_release>
 8003fb8:	4b04      	ldr	r3, [pc, #16]	@ (8003fcc <__sinit+0x28>)
 8003fba:	6223      	str	r3, [r4, #32]
 8003fbc:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <__sinit+0x2c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f5      	bne.n	8003fb0 <__sinit+0xc>
 8003fc4:	f7ff ffc4 	bl	8003f50 <global_stdio_init.part.0>
 8003fc8:	e7f2      	b.n	8003fb0 <__sinit+0xc>
 8003fca:	bf00      	nop
 8003fcc:	08003f11 	.word	0x08003f11
 8003fd0:	20000270 	.word	0x20000270

08003fd4 <_fwalk_sglue>:
 8003fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fd8:	4607      	mov	r7, r0
 8003fda:	4688      	mov	r8, r1
 8003fdc:	4614      	mov	r4, r2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8003fe8:	d505      	bpl.n	8003ff6 <_fwalk_sglue+0x22>
 8003fea:	6824      	ldr	r4, [r4, #0]
 8003fec:	2c00      	cmp	r4, #0
 8003fee:	d1f7      	bne.n	8003fe0 <_fwalk_sglue+0xc>
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ff6:	89ab      	ldrh	r3, [r5, #12]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d907      	bls.n	800400c <_fwalk_sglue+0x38>
 8003ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004000:	3301      	adds	r3, #1
 8004002:	d003      	beq.n	800400c <_fwalk_sglue+0x38>
 8004004:	4629      	mov	r1, r5
 8004006:	4638      	mov	r0, r7
 8004008:	47c0      	blx	r8
 800400a:	4306      	orrs	r6, r0
 800400c:	3568      	adds	r5, #104	@ 0x68
 800400e:	e7e9      	b.n	8003fe4 <_fwalk_sglue+0x10>

08004010 <iprintf>:
 8004010:	b40f      	push	{r0, r1, r2, r3}
 8004012:	b507      	push	{r0, r1, r2, lr}
 8004014:	4906      	ldr	r1, [pc, #24]	@ (8004030 <iprintf+0x20>)
 8004016:	ab04      	add	r3, sp, #16
 8004018:	6808      	ldr	r0, [r1, #0]
 800401a:	f853 2b04 	ldr.w	r2, [r3], #4
 800401e:	6881      	ldr	r1, [r0, #8]
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	f000 fb61 	bl	80046e8 <_vfiprintf_r>
 8004026:	b003      	add	sp, #12
 8004028:	f85d eb04 	ldr.w	lr, [sp], #4
 800402c:	b004      	add	sp, #16
 800402e:	4770      	bx	lr
 8004030:	20000018 	.word	0x20000018

08004034 <siprintf>:
 8004034:	b40e      	push	{r1, r2, r3}
 8004036:	b500      	push	{lr}
 8004038:	b09c      	sub	sp, #112	@ 0x70
 800403a:	ab1d      	add	r3, sp, #116	@ 0x74
 800403c:	9002      	str	r0, [sp, #8]
 800403e:	9006      	str	r0, [sp, #24]
 8004040:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004044:	4809      	ldr	r0, [pc, #36]	@ (800406c <siprintf+0x38>)
 8004046:	9107      	str	r1, [sp, #28]
 8004048:	9104      	str	r1, [sp, #16]
 800404a:	4909      	ldr	r1, [pc, #36]	@ (8004070 <siprintf+0x3c>)
 800404c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004050:	9105      	str	r1, [sp, #20]
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	a902      	add	r1, sp, #8
 8004058:	f000 fa20 	bl	800449c <_svfiprintf_r>
 800405c:	9b02      	ldr	r3, [sp, #8]
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	b01c      	add	sp, #112	@ 0x70
 8004064:	f85d eb04 	ldr.w	lr, [sp], #4
 8004068:	b003      	add	sp, #12
 800406a:	4770      	bx	lr
 800406c:	20000018 	.word	0x20000018
 8004070:	ffff0208 	.word	0xffff0208

08004074 <__sread>:
 8004074:	b510      	push	{r4, lr}
 8004076:	460c      	mov	r4, r1
 8004078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407c:	f000 f868 	bl	8004150 <_read_r>
 8004080:	2800      	cmp	r0, #0
 8004082:	bfab      	itete	ge
 8004084:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004086:	89a3      	ldrhlt	r3, [r4, #12]
 8004088:	181b      	addge	r3, r3, r0
 800408a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800408e:	bfac      	ite	ge
 8004090:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004092:	81a3      	strhlt	r3, [r4, #12]
 8004094:	bd10      	pop	{r4, pc}

08004096 <__swrite>:
 8004096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409a:	461f      	mov	r7, r3
 800409c:	898b      	ldrh	r3, [r1, #12]
 800409e:	05db      	lsls	r3, r3, #23
 80040a0:	4605      	mov	r5, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	4616      	mov	r6, r2
 80040a6:	d505      	bpl.n	80040b4 <__swrite+0x1e>
 80040a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ac:	2302      	movs	r3, #2
 80040ae:	2200      	movs	r2, #0
 80040b0:	f000 f83c 	bl	800412c <_lseek_r>
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	4632      	mov	r2, r6
 80040c2:	463b      	mov	r3, r7
 80040c4:	4628      	mov	r0, r5
 80040c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ca:	f000 b853 	b.w	8004174 <_write_r>

080040ce <__sseek>:
 80040ce:	b510      	push	{r4, lr}
 80040d0:	460c      	mov	r4, r1
 80040d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d6:	f000 f829 	bl	800412c <_lseek_r>
 80040da:	1c43      	adds	r3, r0, #1
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	bf15      	itete	ne
 80040e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040ea:	81a3      	strheq	r3, [r4, #12]
 80040ec:	bf18      	it	ne
 80040ee:	81a3      	strhne	r3, [r4, #12]
 80040f0:	bd10      	pop	{r4, pc}

080040f2 <__sclose>:
 80040f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f6:	f000 b809 	b.w	800410c <_close_r>

080040fa <memset>:
 80040fa:	4402      	add	r2, r0
 80040fc:	4603      	mov	r3, r0
 80040fe:	4293      	cmp	r3, r2
 8004100:	d100      	bne.n	8004104 <memset+0xa>
 8004102:	4770      	bx	lr
 8004104:	f803 1b01 	strb.w	r1, [r3], #1
 8004108:	e7f9      	b.n	80040fe <memset+0x4>
	...

0800410c <_close_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	4d06      	ldr	r5, [pc, #24]	@ (8004128 <_close_r+0x1c>)
 8004110:	2300      	movs	r3, #0
 8004112:	4604      	mov	r4, r0
 8004114:	4608      	mov	r0, r1
 8004116:	602b      	str	r3, [r5, #0]
 8004118:	f7fc fc90 	bl	8000a3c <_close>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_close_r+0x1a>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	b103      	cbz	r3, 8004126 <_close_r+0x1a>
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	20000274 	.word	0x20000274

0800412c <_lseek_r>:
 800412c:	b538      	push	{r3, r4, r5, lr}
 800412e:	4d07      	ldr	r5, [pc, #28]	@ (800414c <_lseek_r+0x20>)
 8004130:	4604      	mov	r4, r0
 8004132:	4608      	mov	r0, r1
 8004134:	4611      	mov	r1, r2
 8004136:	2200      	movs	r2, #0
 8004138:	602a      	str	r2, [r5, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	f7fc fca5 	bl	8000a8a <_lseek>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_lseek_r+0x1e>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	b103      	cbz	r3, 800414a <_lseek_r+0x1e>
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	20000274 	.word	0x20000274

08004150 <_read_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4d07      	ldr	r5, [pc, #28]	@ (8004170 <_read_r+0x20>)
 8004154:	4604      	mov	r4, r0
 8004156:	4608      	mov	r0, r1
 8004158:	4611      	mov	r1, r2
 800415a:	2200      	movs	r2, #0
 800415c:	602a      	str	r2, [r5, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	f7fc fc4f 	bl	8000a02 <_read>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_read_r+0x1e>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_read_r+0x1e>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	20000274 	.word	0x20000274

08004174 <_write_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4d07      	ldr	r5, [pc, #28]	@ (8004194 <_write_r+0x20>)
 8004178:	4604      	mov	r4, r0
 800417a:	4608      	mov	r0, r1
 800417c:	4611      	mov	r1, r2
 800417e:	2200      	movs	r2, #0
 8004180:	602a      	str	r2, [r5, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	f7fc fa52 	bl	800062c <_write>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d102      	bne.n	8004192 <_write_r+0x1e>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	b103      	cbz	r3, 8004192 <_write_r+0x1e>
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	bd38      	pop	{r3, r4, r5, pc}
 8004194:	20000274 	.word	0x20000274

08004198 <__errno>:
 8004198:	4b01      	ldr	r3, [pc, #4]	@ (80041a0 <__errno+0x8>)
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000018 	.word	0x20000018

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4d0d      	ldr	r5, [pc, #52]	@ (80041dc <__libc_init_array+0x38>)
 80041a8:	4c0d      	ldr	r4, [pc, #52]	@ (80041e0 <__libc_init_array+0x3c>)
 80041aa:	1b64      	subs	r4, r4, r5
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	2600      	movs	r6, #0
 80041b0:	42a6      	cmp	r6, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	4d0b      	ldr	r5, [pc, #44]	@ (80041e4 <__libc_init_array+0x40>)
 80041b6:	4c0c      	ldr	r4, [pc, #48]	@ (80041e8 <__libc_init_array+0x44>)
 80041b8:	f000 fec2 	bl	8004f40 <_init>
 80041bc:	1b64      	subs	r4, r4, r5
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	2600      	movs	r6, #0
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041cc:	4798      	blx	r3
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d6:	4798      	blx	r3
 80041d8:	3601      	adds	r6, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	0800502c 	.word	0x0800502c
 80041e0:	0800502c 	.word	0x0800502c
 80041e4:	0800502c 	.word	0x0800502c
 80041e8:	08005030 	.word	0x08005030

080041ec <__retarget_lock_init_recursive>:
 80041ec:	4770      	bx	lr

080041ee <__retarget_lock_acquire_recursive>:
 80041ee:	4770      	bx	lr

080041f0 <__retarget_lock_release_recursive>:
 80041f0:	4770      	bx	lr
	...

080041f4 <_free_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4605      	mov	r5, r0
 80041f8:	2900      	cmp	r1, #0
 80041fa:	d041      	beq.n	8004280 <_free_r+0x8c>
 80041fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004200:	1f0c      	subs	r4, r1, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfb8      	it	lt
 8004206:	18e4      	addlt	r4, r4, r3
 8004208:	f000 f8e0 	bl	80043cc <__malloc_lock>
 800420c:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <_free_r+0x90>)
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	b933      	cbnz	r3, 8004220 <_free_r+0x2c>
 8004212:	6063      	str	r3, [r4, #4]
 8004214:	6014      	str	r4, [r2, #0]
 8004216:	4628      	mov	r0, r5
 8004218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800421c:	f000 b8dc 	b.w	80043d8 <__malloc_unlock>
 8004220:	42a3      	cmp	r3, r4
 8004222:	d908      	bls.n	8004236 <_free_r+0x42>
 8004224:	6820      	ldr	r0, [r4, #0]
 8004226:	1821      	adds	r1, r4, r0
 8004228:	428b      	cmp	r3, r1
 800422a:	bf01      	itttt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	1809      	addeq	r1, r1, r0
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	e7ed      	b.n	8004212 <_free_r+0x1e>
 8004236:	461a      	mov	r2, r3
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b10b      	cbz	r3, 8004240 <_free_r+0x4c>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d9fa      	bls.n	8004236 <_free_r+0x42>
 8004240:	6811      	ldr	r1, [r2, #0]
 8004242:	1850      	adds	r0, r2, r1
 8004244:	42a0      	cmp	r0, r4
 8004246:	d10b      	bne.n	8004260 <_free_r+0x6c>
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	4401      	add	r1, r0
 800424c:	1850      	adds	r0, r2, r1
 800424e:	4283      	cmp	r3, r0
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	d1e0      	bne.n	8004216 <_free_r+0x22>
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	6053      	str	r3, [r2, #4]
 800425a:	4408      	add	r0, r1
 800425c:	6010      	str	r0, [r2, #0]
 800425e:	e7da      	b.n	8004216 <_free_r+0x22>
 8004260:	d902      	bls.n	8004268 <_free_r+0x74>
 8004262:	230c      	movs	r3, #12
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	e7d6      	b.n	8004216 <_free_r+0x22>
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	1821      	adds	r1, r4, r0
 800426c:	428b      	cmp	r3, r1
 800426e:	bf04      	itt	eq
 8004270:	6819      	ldreq	r1, [r3, #0]
 8004272:	685b      	ldreq	r3, [r3, #4]
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	bf04      	itt	eq
 8004278:	1809      	addeq	r1, r1, r0
 800427a:	6021      	streq	r1, [r4, #0]
 800427c:	6054      	str	r4, [r2, #4]
 800427e:	e7ca      	b.n	8004216 <_free_r+0x22>
 8004280:	bd38      	pop	{r3, r4, r5, pc}
 8004282:	bf00      	nop
 8004284:	20000280 	.word	0x20000280

08004288 <sbrk_aligned>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4e0f      	ldr	r6, [pc, #60]	@ (80042c8 <sbrk_aligned+0x40>)
 800428c:	460c      	mov	r4, r1
 800428e:	6831      	ldr	r1, [r6, #0]
 8004290:	4605      	mov	r5, r0
 8004292:	b911      	cbnz	r1, 800429a <sbrk_aligned+0x12>
 8004294:	f000 fd7c 	bl	8004d90 <_sbrk_r>
 8004298:	6030      	str	r0, [r6, #0]
 800429a:	4621      	mov	r1, r4
 800429c:	4628      	mov	r0, r5
 800429e:	f000 fd77 	bl	8004d90 <_sbrk_r>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	d103      	bne.n	80042ae <sbrk_aligned+0x26>
 80042a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80042aa:	4620      	mov	r0, r4
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
 80042ae:	1cc4      	adds	r4, r0, #3
 80042b0:	f024 0403 	bic.w	r4, r4, #3
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d0f8      	beq.n	80042aa <sbrk_aligned+0x22>
 80042b8:	1a21      	subs	r1, r4, r0
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 fd68 	bl	8004d90 <_sbrk_r>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d1f2      	bne.n	80042aa <sbrk_aligned+0x22>
 80042c4:	e7ef      	b.n	80042a6 <sbrk_aligned+0x1e>
 80042c6:	bf00      	nop
 80042c8:	2000027c 	.word	0x2000027c

080042cc <_malloc_r>:
 80042cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d0:	1ccd      	adds	r5, r1, #3
 80042d2:	f025 0503 	bic.w	r5, r5, #3
 80042d6:	3508      	adds	r5, #8
 80042d8:	2d0c      	cmp	r5, #12
 80042da:	bf38      	it	cc
 80042dc:	250c      	movcc	r5, #12
 80042de:	2d00      	cmp	r5, #0
 80042e0:	4606      	mov	r6, r0
 80042e2:	db01      	blt.n	80042e8 <_malloc_r+0x1c>
 80042e4:	42a9      	cmp	r1, r5
 80042e6:	d904      	bls.n	80042f2 <_malloc_r+0x26>
 80042e8:	230c      	movs	r3, #12
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	2000      	movs	r0, #0
 80042ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043c8 <_malloc_r+0xfc>
 80042f6:	f000 f869 	bl	80043cc <__malloc_lock>
 80042fa:	f8d8 3000 	ldr.w	r3, [r8]
 80042fe:	461c      	mov	r4, r3
 8004300:	bb44      	cbnz	r4, 8004354 <_malloc_r+0x88>
 8004302:	4629      	mov	r1, r5
 8004304:	4630      	mov	r0, r6
 8004306:	f7ff ffbf 	bl	8004288 <sbrk_aligned>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	4604      	mov	r4, r0
 800430e:	d158      	bne.n	80043c2 <_malloc_r+0xf6>
 8004310:	f8d8 4000 	ldr.w	r4, [r8]
 8004314:	4627      	mov	r7, r4
 8004316:	2f00      	cmp	r7, #0
 8004318:	d143      	bne.n	80043a2 <_malloc_r+0xd6>
 800431a:	2c00      	cmp	r4, #0
 800431c:	d04b      	beq.n	80043b6 <_malloc_r+0xea>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	4639      	mov	r1, r7
 8004322:	4630      	mov	r0, r6
 8004324:	eb04 0903 	add.w	r9, r4, r3
 8004328:	f000 fd32 	bl	8004d90 <_sbrk_r>
 800432c:	4581      	cmp	r9, r0
 800432e:	d142      	bne.n	80043b6 <_malloc_r+0xea>
 8004330:	6821      	ldr	r1, [r4, #0]
 8004332:	1a6d      	subs	r5, r5, r1
 8004334:	4629      	mov	r1, r5
 8004336:	4630      	mov	r0, r6
 8004338:	f7ff ffa6 	bl	8004288 <sbrk_aligned>
 800433c:	3001      	adds	r0, #1
 800433e:	d03a      	beq.n	80043b6 <_malloc_r+0xea>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	442b      	add	r3, r5
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	f8d8 3000 	ldr.w	r3, [r8]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	bb62      	cbnz	r2, 80043a8 <_malloc_r+0xdc>
 800434e:	f8c8 7000 	str.w	r7, [r8]
 8004352:	e00f      	b.n	8004374 <_malloc_r+0xa8>
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	1b52      	subs	r2, r2, r5
 8004358:	d420      	bmi.n	800439c <_malloc_r+0xd0>
 800435a:	2a0b      	cmp	r2, #11
 800435c:	d917      	bls.n	800438e <_malloc_r+0xc2>
 800435e:	1961      	adds	r1, r4, r5
 8004360:	42a3      	cmp	r3, r4
 8004362:	6025      	str	r5, [r4, #0]
 8004364:	bf18      	it	ne
 8004366:	6059      	strne	r1, [r3, #4]
 8004368:	6863      	ldr	r3, [r4, #4]
 800436a:	bf08      	it	eq
 800436c:	f8c8 1000 	streq.w	r1, [r8]
 8004370:	5162      	str	r2, [r4, r5]
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	4630      	mov	r0, r6
 8004376:	f000 f82f 	bl	80043d8 <__malloc_unlock>
 800437a:	f104 000b 	add.w	r0, r4, #11
 800437e:	1d23      	adds	r3, r4, #4
 8004380:	f020 0007 	bic.w	r0, r0, #7
 8004384:	1ac2      	subs	r2, r0, r3
 8004386:	bf1c      	itt	ne
 8004388:	1a1b      	subne	r3, r3, r0
 800438a:	50a3      	strne	r3, [r4, r2]
 800438c:	e7af      	b.n	80042ee <_malloc_r+0x22>
 800438e:	6862      	ldr	r2, [r4, #4]
 8004390:	42a3      	cmp	r3, r4
 8004392:	bf0c      	ite	eq
 8004394:	f8c8 2000 	streq.w	r2, [r8]
 8004398:	605a      	strne	r2, [r3, #4]
 800439a:	e7eb      	b.n	8004374 <_malloc_r+0xa8>
 800439c:	4623      	mov	r3, r4
 800439e:	6864      	ldr	r4, [r4, #4]
 80043a0:	e7ae      	b.n	8004300 <_malloc_r+0x34>
 80043a2:	463c      	mov	r4, r7
 80043a4:	687f      	ldr	r7, [r7, #4]
 80043a6:	e7b6      	b.n	8004316 <_malloc_r+0x4a>
 80043a8:	461a      	mov	r2, r3
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	d1fb      	bne.n	80043a8 <_malloc_r+0xdc>
 80043b0:	2300      	movs	r3, #0
 80043b2:	6053      	str	r3, [r2, #4]
 80043b4:	e7de      	b.n	8004374 <_malloc_r+0xa8>
 80043b6:	230c      	movs	r3, #12
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	4630      	mov	r0, r6
 80043bc:	f000 f80c 	bl	80043d8 <__malloc_unlock>
 80043c0:	e794      	b.n	80042ec <_malloc_r+0x20>
 80043c2:	6005      	str	r5, [r0, #0]
 80043c4:	e7d6      	b.n	8004374 <_malloc_r+0xa8>
 80043c6:	bf00      	nop
 80043c8:	20000280 	.word	0x20000280

080043cc <__malloc_lock>:
 80043cc:	4801      	ldr	r0, [pc, #4]	@ (80043d4 <__malloc_lock+0x8>)
 80043ce:	f7ff bf0e 	b.w	80041ee <__retarget_lock_acquire_recursive>
 80043d2:	bf00      	nop
 80043d4:	20000278 	.word	0x20000278

080043d8 <__malloc_unlock>:
 80043d8:	4801      	ldr	r0, [pc, #4]	@ (80043e0 <__malloc_unlock+0x8>)
 80043da:	f7ff bf09 	b.w	80041f0 <__retarget_lock_release_recursive>
 80043de:	bf00      	nop
 80043e0:	20000278 	.word	0x20000278

080043e4 <__ssputs_r>:
 80043e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	688e      	ldr	r6, [r1, #8]
 80043ea:	461f      	mov	r7, r3
 80043ec:	42be      	cmp	r6, r7
 80043ee:	680b      	ldr	r3, [r1, #0]
 80043f0:	4682      	mov	sl, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	4690      	mov	r8, r2
 80043f6:	d82d      	bhi.n	8004454 <__ssputs_r+0x70>
 80043f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004400:	d026      	beq.n	8004450 <__ssputs_r+0x6c>
 8004402:	6965      	ldr	r5, [r4, #20]
 8004404:	6909      	ldr	r1, [r1, #16]
 8004406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800440a:	eba3 0901 	sub.w	r9, r3, r1
 800440e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004412:	1c7b      	adds	r3, r7, #1
 8004414:	444b      	add	r3, r9
 8004416:	106d      	asrs	r5, r5, #1
 8004418:	429d      	cmp	r5, r3
 800441a:	bf38      	it	cc
 800441c:	461d      	movcc	r5, r3
 800441e:	0553      	lsls	r3, r2, #21
 8004420:	d527      	bpl.n	8004472 <__ssputs_r+0x8e>
 8004422:	4629      	mov	r1, r5
 8004424:	f7ff ff52 	bl	80042cc <_malloc_r>
 8004428:	4606      	mov	r6, r0
 800442a:	b360      	cbz	r0, 8004486 <__ssputs_r+0xa2>
 800442c:	6921      	ldr	r1, [r4, #16]
 800442e:	464a      	mov	r2, r9
 8004430:	f000 fcbe 	bl	8004db0 <memcpy>
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800443a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443e:	81a3      	strh	r3, [r4, #12]
 8004440:	6126      	str	r6, [r4, #16]
 8004442:	6165      	str	r5, [r4, #20]
 8004444:	444e      	add	r6, r9
 8004446:	eba5 0509 	sub.w	r5, r5, r9
 800444a:	6026      	str	r6, [r4, #0]
 800444c:	60a5      	str	r5, [r4, #8]
 800444e:	463e      	mov	r6, r7
 8004450:	42be      	cmp	r6, r7
 8004452:	d900      	bls.n	8004456 <__ssputs_r+0x72>
 8004454:	463e      	mov	r6, r7
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	4632      	mov	r2, r6
 800445a:	4641      	mov	r1, r8
 800445c:	f000 fc7e 	bl	8004d5c <memmove>
 8004460:	68a3      	ldr	r3, [r4, #8]
 8004462:	1b9b      	subs	r3, r3, r6
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	4433      	add	r3, r6
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	2000      	movs	r0, #0
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	462a      	mov	r2, r5
 8004474:	f000 fcaa 	bl	8004dcc <_realloc_r>
 8004478:	4606      	mov	r6, r0
 800447a:	2800      	cmp	r0, #0
 800447c:	d1e0      	bne.n	8004440 <__ssputs_r+0x5c>
 800447e:	6921      	ldr	r1, [r4, #16]
 8004480:	4650      	mov	r0, sl
 8004482:	f7ff feb7 	bl	80041f4 <_free_r>
 8004486:	230c      	movs	r3, #12
 8004488:	f8ca 3000 	str.w	r3, [sl]
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004492:	81a3      	strh	r3, [r4, #12]
 8004494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004498:	e7e9      	b.n	800446e <__ssputs_r+0x8a>
	...

0800449c <_svfiprintf_r>:
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	4698      	mov	r8, r3
 80044a2:	898b      	ldrh	r3, [r1, #12]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	b09d      	sub	sp, #116	@ 0x74
 80044a8:	4607      	mov	r7, r0
 80044aa:	460d      	mov	r5, r1
 80044ac:	4614      	mov	r4, r2
 80044ae:	d510      	bpl.n	80044d2 <_svfiprintf_r+0x36>
 80044b0:	690b      	ldr	r3, [r1, #16]
 80044b2:	b973      	cbnz	r3, 80044d2 <_svfiprintf_r+0x36>
 80044b4:	2140      	movs	r1, #64	@ 0x40
 80044b6:	f7ff ff09 	bl	80042cc <_malloc_r>
 80044ba:	6028      	str	r0, [r5, #0]
 80044bc:	6128      	str	r0, [r5, #16]
 80044be:	b930      	cbnz	r0, 80044ce <_svfiprintf_r+0x32>
 80044c0:	230c      	movs	r3, #12
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044c8:	b01d      	add	sp, #116	@ 0x74
 80044ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ce:	2340      	movs	r3, #64	@ 0x40
 80044d0:	616b      	str	r3, [r5, #20]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044d6:	2320      	movs	r3, #32
 80044d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80044e0:	2330      	movs	r3, #48	@ 0x30
 80044e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004680 <_svfiprintf_r+0x1e4>
 80044e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044ea:	f04f 0901 	mov.w	r9, #1
 80044ee:	4623      	mov	r3, r4
 80044f0:	469a      	mov	sl, r3
 80044f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f6:	b10a      	cbz	r2, 80044fc <_svfiprintf_r+0x60>
 80044f8:	2a25      	cmp	r2, #37	@ 0x25
 80044fa:	d1f9      	bne.n	80044f0 <_svfiprintf_r+0x54>
 80044fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004500:	d00b      	beq.n	800451a <_svfiprintf_r+0x7e>
 8004502:	465b      	mov	r3, fp
 8004504:	4622      	mov	r2, r4
 8004506:	4629      	mov	r1, r5
 8004508:	4638      	mov	r0, r7
 800450a:	f7ff ff6b 	bl	80043e4 <__ssputs_r>
 800450e:	3001      	adds	r0, #1
 8004510:	f000 80a7 	beq.w	8004662 <_svfiprintf_r+0x1c6>
 8004514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004516:	445a      	add	r2, fp
 8004518:	9209      	str	r2, [sp, #36]	@ 0x24
 800451a:	f89a 3000 	ldrb.w	r3, [sl]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 809f 	beq.w	8004662 <_svfiprintf_r+0x1c6>
 8004524:	2300      	movs	r3, #0
 8004526:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800452a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800452e:	f10a 0a01 	add.w	sl, sl, #1
 8004532:	9304      	str	r3, [sp, #16]
 8004534:	9307      	str	r3, [sp, #28]
 8004536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800453a:	931a      	str	r3, [sp, #104]	@ 0x68
 800453c:	4654      	mov	r4, sl
 800453e:	2205      	movs	r2, #5
 8004540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004544:	484e      	ldr	r0, [pc, #312]	@ (8004680 <_svfiprintf_r+0x1e4>)
 8004546:	f7fb fe43 	bl	80001d0 <memchr>
 800454a:	9a04      	ldr	r2, [sp, #16]
 800454c:	b9d8      	cbnz	r0, 8004586 <_svfiprintf_r+0xea>
 800454e:	06d0      	lsls	r0, r2, #27
 8004550:	bf44      	itt	mi
 8004552:	2320      	movmi	r3, #32
 8004554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004558:	0711      	lsls	r1, r2, #28
 800455a:	bf44      	itt	mi
 800455c:	232b      	movmi	r3, #43	@ 0x2b
 800455e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004562:	f89a 3000 	ldrb.w	r3, [sl]
 8004566:	2b2a      	cmp	r3, #42	@ 0x2a
 8004568:	d015      	beq.n	8004596 <_svfiprintf_r+0xfa>
 800456a:	9a07      	ldr	r2, [sp, #28]
 800456c:	4654      	mov	r4, sl
 800456e:	2000      	movs	r0, #0
 8004570:	f04f 0c0a 	mov.w	ip, #10
 8004574:	4621      	mov	r1, r4
 8004576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800457a:	3b30      	subs	r3, #48	@ 0x30
 800457c:	2b09      	cmp	r3, #9
 800457e:	d94b      	bls.n	8004618 <_svfiprintf_r+0x17c>
 8004580:	b1b0      	cbz	r0, 80045b0 <_svfiprintf_r+0x114>
 8004582:	9207      	str	r2, [sp, #28]
 8004584:	e014      	b.n	80045b0 <_svfiprintf_r+0x114>
 8004586:	eba0 0308 	sub.w	r3, r0, r8
 800458a:	fa09 f303 	lsl.w	r3, r9, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	46a2      	mov	sl, r4
 8004594:	e7d2      	b.n	800453c <_svfiprintf_r+0xa0>
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	1d19      	adds	r1, r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	9103      	str	r1, [sp, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bfbb      	ittet	lt
 80045a2:	425b      	neglt	r3, r3
 80045a4:	f042 0202 	orrlt.w	r2, r2, #2
 80045a8:	9307      	strge	r3, [sp, #28]
 80045aa:	9307      	strlt	r3, [sp, #28]
 80045ac:	bfb8      	it	lt
 80045ae:	9204      	strlt	r2, [sp, #16]
 80045b0:	7823      	ldrb	r3, [r4, #0]
 80045b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045b4:	d10a      	bne.n	80045cc <_svfiprintf_r+0x130>
 80045b6:	7863      	ldrb	r3, [r4, #1]
 80045b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ba:	d132      	bne.n	8004622 <_svfiprintf_r+0x186>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	9203      	str	r2, [sp, #12]
 80045c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045c8:	3402      	adds	r4, #2
 80045ca:	9305      	str	r3, [sp, #20]
 80045cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004690 <_svfiprintf_r+0x1f4>
 80045d0:	7821      	ldrb	r1, [r4, #0]
 80045d2:	2203      	movs	r2, #3
 80045d4:	4650      	mov	r0, sl
 80045d6:	f7fb fdfb 	bl	80001d0 <memchr>
 80045da:	b138      	cbz	r0, 80045ec <_svfiprintf_r+0x150>
 80045dc:	9b04      	ldr	r3, [sp, #16]
 80045de:	eba0 000a 	sub.w	r0, r0, sl
 80045e2:	2240      	movs	r2, #64	@ 0x40
 80045e4:	4082      	lsls	r2, r0
 80045e6:	4313      	orrs	r3, r2
 80045e8:	3401      	adds	r4, #1
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f0:	4824      	ldr	r0, [pc, #144]	@ (8004684 <_svfiprintf_r+0x1e8>)
 80045f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045f6:	2206      	movs	r2, #6
 80045f8:	f7fb fdea 	bl	80001d0 <memchr>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d036      	beq.n	800466e <_svfiprintf_r+0x1d2>
 8004600:	4b21      	ldr	r3, [pc, #132]	@ (8004688 <_svfiprintf_r+0x1ec>)
 8004602:	bb1b      	cbnz	r3, 800464c <_svfiprintf_r+0x1b0>
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	3307      	adds	r3, #7
 8004608:	f023 0307 	bic.w	r3, r3, #7
 800460c:	3308      	adds	r3, #8
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004612:	4433      	add	r3, r6
 8004614:	9309      	str	r3, [sp, #36]	@ 0x24
 8004616:	e76a      	b.n	80044ee <_svfiprintf_r+0x52>
 8004618:	fb0c 3202 	mla	r2, ip, r2, r3
 800461c:	460c      	mov	r4, r1
 800461e:	2001      	movs	r0, #1
 8004620:	e7a8      	b.n	8004574 <_svfiprintf_r+0xd8>
 8004622:	2300      	movs	r3, #0
 8004624:	3401      	adds	r4, #1
 8004626:	9305      	str	r3, [sp, #20]
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0c0a 	mov.w	ip, #10
 800462e:	4620      	mov	r0, r4
 8004630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004634:	3a30      	subs	r2, #48	@ 0x30
 8004636:	2a09      	cmp	r2, #9
 8004638:	d903      	bls.n	8004642 <_svfiprintf_r+0x1a6>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0c6      	beq.n	80045cc <_svfiprintf_r+0x130>
 800463e:	9105      	str	r1, [sp, #20]
 8004640:	e7c4      	b.n	80045cc <_svfiprintf_r+0x130>
 8004642:	fb0c 2101 	mla	r1, ip, r1, r2
 8004646:	4604      	mov	r4, r0
 8004648:	2301      	movs	r3, #1
 800464a:	e7f0      	b.n	800462e <_svfiprintf_r+0x192>
 800464c:	ab03      	add	r3, sp, #12
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	462a      	mov	r2, r5
 8004652:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <_svfiprintf_r+0x1f0>)
 8004654:	a904      	add	r1, sp, #16
 8004656:	4638      	mov	r0, r7
 8004658:	f3af 8000 	nop.w
 800465c:	1c42      	adds	r2, r0, #1
 800465e:	4606      	mov	r6, r0
 8004660:	d1d6      	bne.n	8004610 <_svfiprintf_r+0x174>
 8004662:	89ab      	ldrh	r3, [r5, #12]
 8004664:	065b      	lsls	r3, r3, #25
 8004666:	f53f af2d 	bmi.w	80044c4 <_svfiprintf_r+0x28>
 800466a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800466c:	e72c      	b.n	80044c8 <_svfiprintf_r+0x2c>
 800466e:	ab03      	add	r3, sp, #12
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	462a      	mov	r2, r5
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <_svfiprintf_r+0x1f0>)
 8004676:	a904      	add	r1, sp, #16
 8004678:	4638      	mov	r0, r7
 800467a:	f000 f9bb 	bl	80049f4 <_printf_i>
 800467e:	e7ed      	b.n	800465c <_svfiprintf_r+0x1c0>
 8004680:	08004ff0 	.word	0x08004ff0
 8004684:	08004ffa 	.word	0x08004ffa
 8004688:	00000000 	.word	0x00000000
 800468c:	080043e5 	.word	0x080043e5
 8004690:	08004ff6 	.word	0x08004ff6

08004694 <__sfputc_r>:
 8004694:	6893      	ldr	r3, [r2, #8]
 8004696:	3b01      	subs	r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	b410      	push	{r4}
 800469c:	6093      	str	r3, [r2, #8]
 800469e:	da08      	bge.n	80046b2 <__sfputc_r+0x1e>
 80046a0:	6994      	ldr	r4, [r2, #24]
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	db01      	blt.n	80046aa <__sfputc_r+0x16>
 80046a6:	290a      	cmp	r1, #10
 80046a8:	d103      	bne.n	80046b2 <__sfputc_r+0x1e>
 80046aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ae:	f000 bac1 	b.w	8004c34 <__swbuf_r>
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	1c58      	adds	r0, r3, #1
 80046b6:	6010      	str	r0, [r2, #0]
 80046b8:	7019      	strb	r1, [r3, #0]
 80046ba:	4608      	mov	r0, r1
 80046bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <__sfputs_r>:
 80046c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c4:	4606      	mov	r6, r0
 80046c6:	460f      	mov	r7, r1
 80046c8:	4614      	mov	r4, r2
 80046ca:	18d5      	adds	r5, r2, r3
 80046cc:	42ac      	cmp	r4, r5
 80046ce:	d101      	bne.n	80046d4 <__sfputs_r+0x12>
 80046d0:	2000      	movs	r0, #0
 80046d2:	e007      	b.n	80046e4 <__sfputs_r+0x22>
 80046d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d8:	463a      	mov	r2, r7
 80046da:	4630      	mov	r0, r6
 80046dc:	f7ff ffda 	bl	8004694 <__sfputc_r>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d1f3      	bne.n	80046cc <__sfputs_r+0xa>
 80046e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046e8 <_vfiprintf_r>:
 80046e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ec:	460d      	mov	r5, r1
 80046ee:	b09d      	sub	sp, #116	@ 0x74
 80046f0:	4614      	mov	r4, r2
 80046f2:	4698      	mov	r8, r3
 80046f4:	4606      	mov	r6, r0
 80046f6:	b118      	cbz	r0, 8004700 <_vfiprintf_r+0x18>
 80046f8:	6a03      	ldr	r3, [r0, #32]
 80046fa:	b90b      	cbnz	r3, 8004700 <_vfiprintf_r+0x18>
 80046fc:	f7ff fc52 	bl	8003fa4 <__sinit>
 8004700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004702:	07d9      	lsls	r1, r3, #31
 8004704:	d405      	bmi.n	8004712 <_vfiprintf_r+0x2a>
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	059a      	lsls	r2, r3, #22
 800470a:	d402      	bmi.n	8004712 <_vfiprintf_r+0x2a>
 800470c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800470e:	f7ff fd6e 	bl	80041ee <__retarget_lock_acquire_recursive>
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	071b      	lsls	r3, r3, #28
 8004716:	d501      	bpl.n	800471c <_vfiprintf_r+0x34>
 8004718:	692b      	ldr	r3, [r5, #16]
 800471a:	b99b      	cbnz	r3, 8004744 <_vfiprintf_r+0x5c>
 800471c:	4629      	mov	r1, r5
 800471e:	4630      	mov	r0, r6
 8004720:	f000 fac6 	bl	8004cb0 <__swsetup_r>
 8004724:	b170      	cbz	r0, 8004744 <_vfiprintf_r+0x5c>
 8004726:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004728:	07dc      	lsls	r4, r3, #31
 800472a:	d504      	bpl.n	8004736 <_vfiprintf_r+0x4e>
 800472c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004730:	b01d      	add	sp, #116	@ 0x74
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	89ab      	ldrh	r3, [r5, #12]
 8004738:	0598      	lsls	r0, r3, #22
 800473a:	d4f7      	bmi.n	800472c <_vfiprintf_r+0x44>
 800473c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800473e:	f7ff fd57 	bl	80041f0 <__retarget_lock_release_recursive>
 8004742:	e7f3      	b.n	800472c <_vfiprintf_r+0x44>
 8004744:	2300      	movs	r3, #0
 8004746:	9309      	str	r3, [sp, #36]	@ 0x24
 8004748:	2320      	movs	r3, #32
 800474a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800474e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004752:	2330      	movs	r3, #48	@ 0x30
 8004754:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004904 <_vfiprintf_r+0x21c>
 8004758:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800475c:	f04f 0901 	mov.w	r9, #1
 8004760:	4623      	mov	r3, r4
 8004762:	469a      	mov	sl, r3
 8004764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004768:	b10a      	cbz	r2, 800476e <_vfiprintf_r+0x86>
 800476a:	2a25      	cmp	r2, #37	@ 0x25
 800476c:	d1f9      	bne.n	8004762 <_vfiprintf_r+0x7a>
 800476e:	ebba 0b04 	subs.w	fp, sl, r4
 8004772:	d00b      	beq.n	800478c <_vfiprintf_r+0xa4>
 8004774:	465b      	mov	r3, fp
 8004776:	4622      	mov	r2, r4
 8004778:	4629      	mov	r1, r5
 800477a:	4630      	mov	r0, r6
 800477c:	f7ff ffa1 	bl	80046c2 <__sfputs_r>
 8004780:	3001      	adds	r0, #1
 8004782:	f000 80a7 	beq.w	80048d4 <_vfiprintf_r+0x1ec>
 8004786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004788:	445a      	add	r2, fp
 800478a:	9209      	str	r2, [sp, #36]	@ 0x24
 800478c:	f89a 3000 	ldrb.w	r3, [sl]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 809f 	beq.w	80048d4 <_vfiprintf_r+0x1ec>
 8004796:	2300      	movs	r3, #0
 8004798:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800479c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047a0:	f10a 0a01 	add.w	sl, sl, #1
 80047a4:	9304      	str	r3, [sp, #16]
 80047a6:	9307      	str	r3, [sp, #28]
 80047a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80047ae:	4654      	mov	r4, sl
 80047b0:	2205      	movs	r2, #5
 80047b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b6:	4853      	ldr	r0, [pc, #332]	@ (8004904 <_vfiprintf_r+0x21c>)
 80047b8:	f7fb fd0a 	bl	80001d0 <memchr>
 80047bc:	9a04      	ldr	r2, [sp, #16]
 80047be:	b9d8      	cbnz	r0, 80047f8 <_vfiprintf_r+0x110>
 80047c0:	06d1      	lsls	r1, r2, #27
 80047c2:	bf44      	itt	mi
 80047c4:	2320      	movmi	r3, #32
 80047c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047ca:	0713      	lsls	r3, r2, #28
 80047cc:	bf44      	itt	mi
 80047ce:	232b      	movmi	r3, #43	@ 0x2b
 80047d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047d4:	f89a 3000 	ldrb.w	r3, [sl]
 80047d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047da:	d015      	beq.n	8004808 <_vfiprintf_r+0x120>
 80047dc:	9a07      	ldr	r2, [sp, #28]
 80047de:	4654      	mov	r4, sl
 80047e0:	2000      	movs	r0, #0
 80047e2:	f04f 0c0a 	mov.w	ip, #10
 80047e6:	4621      	mov	r1, r4
 80047e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ec:	3b30      	subs	r3, #48	@ 0x30
 80047ee:	2b09      	cmp	r3, #9
 80047f0:	d94b      	bls.n	800488a <_vfiprintf_r+0x1a2>
 80047f2:	b1b0      	cbz	r0, 8004822 <_vfiprintf_r+0x13a>
 80047f4:	9207      	str	r2, [sp, #28]
 80047f6:	e014      	b.n	8004822 <_vfiprintf_r+0x13a>
 80047f8:	eba0 0308 	sub.w	r3, r0, r8
 80047fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004800:	4313      	orrs	r3, r2
 8004802:	9304      	str	r3, [sp, #16]
 8004804:	46a2      	mov	sl, r4
 8004806:	e7d2      	b.n	80047ae <_vfiprintf_r+0xc6>
 8004808:	9b03      	ldr	r3, [sp, #12]
 800480a:	1d19      	adds	r1, r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	9103      	str	r1, [sp, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	bfbb      	ittet	lt
 8004814:	425b      	neglt	r3, r3
 8004816:	f042 0202 	orrlt.w	r2, r2, #2
 800481a:	9307      	strge	r3, [sp, #28]
 800481c:	9307      	strlt	r3, [sp, #28]
 800481e:	bfb8      	it	lt
 8004820:	9204      	strlt	r2, [sp, #16]
 8004822:	7823      	ldrb	r3, [r4, #0]
 8004824:	2b2e      	cmp	r3, #46	@ 0x2e
 8004826:	d10a      	bne.n	800483e <_vfiprintf_r+0x156>
 8004828:	7863      	ldrb	r3, [r4, #1]
 800482a:	2b2a      	cmp	r3, #42	@ 0x2a
 800482c:	d132      	bne.n	8004894 <_vfiprintf_r+0x1ac>
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	1d1a      	adds	r2, r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	9203      	str	r2, [sp, #12]
 8004836:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800483a:	3402      	adds	r4, #2
 800483c:	9305      	str	r3, [sp, #20]
 800483e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004914 <_vfiprintf_r+0x22c>
 8004842:	7821      	ldrb	r1, [r4, #0]
 8004844:	2203      	movs	r2, #3
 8004846:	4650      	mov	r0, sl
 8004848:	f7fb fcc2 	bl	80001d0 <memchr>
 800484c:	b138      	cbz	r0, 800485e <_vfiprintf_r+0x176>
 800484e:	9b04      	ldr	r3, [sp, #16]
 8004850:	eba0 000a 	sub.w	r0, r0, sl
 8004854:	2240      	movs	r2, #64	@ 0x40
 8004856:	4082      	lsls	r2, r0
 8004858:	4313      	orrs	r3, r2
 800485a:	3401      	adds	r4, #1
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004862:	4829      	ldr	r0, [pc, #164]	@ (8004908 <_vfiprintf_r+0x220>)
 8004864:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004868:	2206      	movs	r2, #6
 800486a:	f7fb fcb1 	bl	80001d0 <memchr>
 800486e:	2800      	cmp	r0, #0
 8004870:	d03f      	beq.n	80048f2 <_vfiprintf_r+0x20a>
 8004872:	4b26      	ldr	r3, [pc, #152]	@ (800490c <_vfiprintf_r+0x224>)
 8004874:	bb1b      	cbnz	r3, 80048be <_vfiprintf_r+0x1d6>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	3307      	adds	r3, #7
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	3308      	adds	r3, #8
 8004880:	9303      	str	r3, [sp, #12]
 8004882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004884:	443b      	add	r3, r7
 8004886:	9309      	str	r3, [sp, #36]	@ 0x24
 8004888:	e76a      	b.n	8004760 <_vfiprintf_r+0x78>
 800488a:	fb0c 3202 	mla	r2, ip, r2, r3
 800488e:	460c      	mov	r4, r1
 8004890:	2001      	movs	r0, #1
 8004892:	e7a8      	b.n	80047e6 <_vfiprintf_r+0xfe>
 8004894:	2300      	movs	r3, #0
 8004896:	3401      	adds	r4, #1
 8004898:	9305      	str	r3, [sp, #20]
 800489a:	4619      	mov	r1, r3
 800489c:	f04f 0c0a 	mov.w	ip, #10
 80048a0:	4620      	mov	r0, r4
 80048a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a6:	3a30      	subs	r2, #48	@ 0x30
 80048a8:	2a09      	cmp	r2, #9
 80048aa:	d903      	bls.n	80048b4 <_vfiprintf_r+0x1cc>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0c6      	beq.n	800483e <_vfiprintf_r+0x156>
 80048b0:	9105      	str	r1, [sp, #20]
 80048b2:	e7c4      	b.n	800483e <_vfiprintf_r+0x156>
 80048b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048b8:	4604      	mov	r4, r0
 80048ba:	2301      	movs	r3, #1
 80048bc:	e7f0      	b.n	80048a0 <_vfiprintf_r+0x1b8>
 80048be:	ab03      	add	r3, sp, #12
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	462a      	mov	r2, r5
 80048c4:	4b12      	ldr	r3, [pc, #72]	@ (8004910 <_vfiprintf_r+0x228>)
 80048c6:	a904      	add	r1, sp, #16
 80048c8:	4630      	mov	r0, r6
 80048ca:	f3af 8000 	nop.w
 80048ce:	4607      	mov	r7, r0
 80048d0:	1c78      	adds	r0, r7, #1
 80048d2:	d1d6      	bne.n	8004882 <_vfiprintf_r+0x19a>
 80048d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048d6:	07d9      	lsls	r1, r3, #31
 80048d8:	d405      	bmi.n	80048e6 <_vfiprintf_r+0x1fe>
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	059a      	lsls	r2, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_vfiprintf_r+0x1fe>
 80048e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048e2:	f7ff fc85 	bl	80041f0 <__retarget_lock_release_recursive>
 80048e6:	89ab      	ldrh	r3, [r5, #12]
 80048e8:	065b      	lsls	r3, r3, #25
 80048ea:	f53f af1f 	bmi.w	800472c <_vfiprintf_r+0x44>
 80048ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048f0:	e71e      	b.n	8004730 <_vfiprintf_r+0x48>
 80048f2:	ab03      	add	r3, sp, #12
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	462a      	mov	r2, r5
 80048f8:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <_vfiprintf_r+0x228>)
 80048fa:	a904      	add	r1, sp, #16
 80048fc:	4630      	mov	r0, r6
 80048fe:	f000 f879 	bl	80049f4 <_printf_i>
 8004902:	e7e4      	b.n	80048ce <_vfiprintf_r+0x1e6>
 8004904:	08004ff0 	.word	0x08004ff0
 8004908:	08004ffa 	.word	0x08004ffa
 800490c:	00000000 	.word	0x00000000
 8004910:	080046c3 	.word	0x080046c3
 8004914:	08004ff6 	.word	0x08004ff6

08004918 <_printf_common>:
 8004918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800491c:	4616      	mov	r6, r2
 800491e:	4698      	mov	r8, r3
 8004920:	688a      	ldr	r2, [r1, #8]
 8004922:	690b      	ldr	r3, [r1, #16]
 8004924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004928:	4293      	cmp	r3, r2
 800492a:	bfb8      	it	lt
 800492c:	4613      	movlt	r3, r2
 800492e:	6033      	str	r3, [r6, #0]
 8004930:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004934:	4607      	mov	r7, r0
 8004936:	460c      	mov	r4, r1
 8004938:	b10a      	cbz	r2, 800493e <_printf_common+0x26>
 800493a:	3301      	adds	r3, #1
 800493c:	6033      	str	r3, [r6, #0]
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	0699      	lsls	r1, r3, #26
 8004942:	bf42      	ittt	mi
 8004944:	6833      	ldrmi	r3, [r6, #0]
 8004946:	3302      	addmi	r3, #2
 8004948:	6033      	strmi	r3, [r6, #0]
 800494a:	6825      	ldr	r5, [r4, #0]
 800494c:	f015 0506 	ands.w	r5, r5, #6
 8004950:	d106      	bne.n	8004960 <_printf_common+0x48>
 8004952:	f104 0a19 	add.w	sl, r4, #25
 8004956:	68e3      	ldr	r3, [r4, #12]
 8004958:	6832      	ldr	r2, [r6, #0]
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	42ab      	cmp	r3, r5
 800495e:	dc26      	bgt.n	80049ae <_printf_common+0x96>
 8004960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	3b00      	subs	r3, #0
 8004968:	bf18      	it	ne
 800496a:	2301      	movne	r3, #1
 800496c:	0692      	lsls	r2, r2, #26
 800496e:	d42b      	bmi.n	80049c8 <_printf_common+0xb0>
 8004970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004974:	4641      	mov	r1, r8
 8004976:	4638      	mov	r0, r7
 8004978:	47c8      	blx	r9
 800497a:	3001      	adds	r0, #1
 800497c:	d01e      	beq.n	80049bc <_printf_common+0xa4>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	f003 0306 	and.w	r3, r3, #6
 8004986:	2b04      	cmp	r3, #4
 8004988:	bf02      	ittt	eq
 800498a:	68e5      	ldreq	r5, [r4, #12]
 800498c:	6833      	ldreq	r3, [r6, #0]
 800498e:	1aed      	subeq	r5, r5, r3
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	bf0c      	ite	eq
 8004994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004998:	2500      	movne	r5, #0
 800499a:	4293      	cmp	r3, r2
 800499c:	bfc4      	itt	gt
 800499e:	1a9b      	subgt	r3, r3, r2
 80049a0:	18ed      	addgt	r5, r5, r3
 80049a2:	2600      	movs	r6, #0
 80049a4:	341a      	adds	r4, #26
 80049a6:	42b5      	cmp	r5, r6
 80049a8:	d11a      	bne.n	80049e0 <_printf_common+0xc8>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e008      	b.n	80049c0 <_printf_common+0xa8>
 80049ae:	2301      	movs	r3, #1
 80049b0:	4652      	mov	r2, sl
 80049b2:	4641      	mov	r1, r8
 80049b4:	4638      	mov	r0, r7
 80049b6:	47c8      	blx	r9
 80049b8:	3001      	adds	r0, #1
 80049ba:	d103      	bne.n	80049c4 <_printf_common+0xac>
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c4:	3501      	adds	r5, #1
 80049c6:	e7c6      	b.n	8004956 <_printf_common+0x3e>
 80049c8:	18e1      	adds	r1, r4, r3
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	2030      	movs	r0, #48	@ 0x30
 80049ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049d2:	4422      	add	r2, r4
 80049d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049dc:	3302      	adds	r3, #2
 80049de:	e7c7      	b.n	8004970 <_printf_common+0x58>
 80049e0:	2301      	movs	r3, #1
 80049e2:	4622      	mov	r2, r4
 80049e4:	4641      	mov	r1, r8
 80049e6:	4638      	mov	r0, r7
 80049e8:	47c8      	blx	r9
 80049ea:	3001      	adds	r0, #1
 80049ec:	d0e6      	beq.n	80049bc <_printf_common+0xa4>
 80049ee:	3601      	adds	r6, #1
 80049f0:	e7d9      	b.n	80049a6 <_printf_common+0x8e>
	...

080049f4 <_printf_i>:
 80049f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f8:	7e0f      	ldrb	r7, [r1, #24]
 80049fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049fc:	2f78      	cmp	r7, #120	@ 0x78
 80049fe:	4691      	mov	r9, r2
 8004a00:	4680      	mov	r8, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	469a      	mov	sl, r3
 8004a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a0a:	d807      	bhi.n	8004a1c <_printf_i+0x28>
 8004a0c:	2f62      	cmp	r7, #98	@ 0x62
 8004a0e:	d80a      	bhi.n	8004a26 <_printf_i+0x32>
 8004a10:	2f00      	cmp	r7, #0
 8004a12:	f000 80d2 	beq.w	8004bba <_printf_i+0x1c6>
 8004a16:	2f58      	cmp	r7, #88	@ 0x58
 8004a18:	f000 80b9 	beq.w	8004b8e <_printf_i+0x19a>
 8004a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a24:	e03a      	b.n	8004a9c <_printf_i+0xa8>
 8004a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a2a:	2b15      	cmp	r3, #21
 8004a2c:	d8f6      	bhi.n	8004a1c <_printf_i+0x28>
 8004a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004a34 <_printf_i+0x40>)
 8004a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a34:	08004a8d 	.word	0x08004a8d
 8004a38:	08004aa1 	.word	0x08004aa1
 8004a3c:	08004a1d 	.word	0x08004a1d
 8004a40:	08004a1d 	.word	0x08004a1d
 8004a44:	08004a1d 	.word	0x08004a1d
 8004a48:	08004a1d 	.word	0x08004a1d
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	08004a1d 	.word	0x08004a1d
 8004a54:	08004a1d 	.word	0x08004a1d
 8004a58:	08004a1d 	.word	0x08004a1d
 8004a5c:	08004a1d 	.word	0x08004a1d
 8004a60:	08004ba1 	.word	0x08004ba1
 8004a64:	08004acb 	.word	0x08004acb
 8004a68:	08004b5b 	.word	0x08004b5b
 8004a6c:	08004a1d 	.word	0x08004a1d
 8004a70:	08004a1d 	.word	0x08004a1d
 8004a74:	08004bc3 	.word	0x08004bc3
 8004a78:	08004a1d 	.word	0x08004a1d
 8004a7c:	08004acb 	.word	0x08004acb
 8004a80:	08004a1d 	.word	0x08004a1d
 8004a84:	08004a1d 	.word	0x08004a1d
 8004a88:	08004b63 	.word	0x08004b63
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	1d1a      	adds	r2, r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6032      	str	r2, [r6, #0]
 8004a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e09d      	b.n	8004bdc <_printf_i+0x1e8>
 8004aa0:	6833      	ldr	r3, [r6, #0]
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	1d19      	adds	r1, r3, #4
 8004aa6:	6031      	str	r1, [r6, #0]
 8004aa8:	0606      	lsls	r6, r0, #24
 8004aaa:	d501      	bpl.n	8004ab0 <_printf_i+0xbc>
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	e003      	b.n	8004ab8 <_printf_i+0xc4>
 8004ab0:	0645      	lsls	r5, r0, #25
 8004ab2:	d5fb      	bpl.n	8004aac <_printf_i+0xb8>
 8004ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	da03      	bge.n	8004ac4 <_printf_i+0xd0>
 8004abc:	232d      	movs	r3, #45	@ 0x2d
 8004abe:	426d      	negs	r5, r5
 8004ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ac4:	4859      	ldr	r0, [pc, #356]	@ (8004c2c <_printf_i+0x238>)
 8004ac6:	230a      	movs	r3, #10
 8004ac8:	e011      	b.n	8004aee <_printf_i+0xfa>
 8004aca:	6821      	ldr	r1, [r4, #0]
 8004acc:	6833      	ldr	r3, [r6, #0]
 8004ace:	0608      	lsls	r0, r1, #24
 8004ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ad4:	d402      	bmi.n	8004adc <_printf_i+0xe8>
 8004ad6:	0649      	lsls	r1, r1, #25
 8004ad8:	bf48      	it	mi
 8004ada:	b2ad      	uxthmi	r5, r5
 8004adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ade:	4853      	ldr	r0, [pc, #332]	@ (8004c2c <_printf_i+0x238>)
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	bf14      	ite	ne
 8004ae4:	230a      	movne	r3, #10
 8004ae6:	2308      	moveq	r3, #8
 8004ae8:	2100      	movs	r1, #0
 8004aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aee:	6866      	ldr	r6, [r4, #4]
 8004af0:	60a6      	str	r6, [r4, #8]
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	bfa2      	ittt	ge
 8004af6:	6821      	ldrge	r1, [r4, #0]
 8004af8:	f021 0104 	bicge.w	r1, r1, #4
 8004afc:	6021      	strge	r1, [r4, #0]
 8004afe:	b90d      	cbnz	r5, 8004b04 <_printf_i+0x110>
 8004b00:	2e00      	cmp	r6, #0
 8004b02:	d04b      	beq.n	8004b9c <_printf_i+0x1a8>
 8004b04:	4616      	mov	r6, r2
 8004b06:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b0a:	fb03 5711 	mls	r7, r3, r1, r5
 8004b0e:	5dc7      	ldrb	r7, [r0, r7]
 8004b10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b14:	462f      	mov	r7, r5
 8004b16:	42bb      	cmp	r3, r7
 8004b18:	460d      	mov	r5, r1
 8004b1a:	d9f4      	bls.n	8004b06 <_printf_i+0x112>
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d10b      	bne.n	8004b38 <_printf_i+0x144>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	07df      	lsls	r7, r3, #31
 8004b24:	d508      	bpl.n	8004b38 <_printf_i+0x144>
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	6861      	ldr	r1, [r4, #4]
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	bfde      	ittt	le
 8004b2e:	2330      	movle	r3, #48	@ 0x30
 8004b30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b34:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b38:	1b92      	subs	r2, r2, r6
 8004b3a:	6122      	str	r2, [r4, #16]
 8004b3c:	f8cd a000 	str.w	sl, [sp]
 8004b40:	464b      	mov	r3, r9
 8004b42:	aa03      	add	r2, sp, #12
 8004b44:	4621      	mov	r1, r4
 8004b46:	4640      	mov	r0, r8
 8004b48:	f7ff fee6 	bl	8004918 <_printf_common>
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d14a      	bne.n	8004be6 <_printf_i+0x1f2>
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b54:	b004      	add	sp, #16
 8004b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	f043 0320 	orr.w	r3, r3, #32
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	4833      	ldr	r0, [pc, #204]	@ (8004c30 <_printf_i+0x23c>)
 8004b64:	2778      	movs	r7, #120	@ 0x78
 8004b66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	6831      	ldr	r1, [r6, #0]
 8004b6e:	061f      	lsls	r7, r3, #24
 8004b70:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b74:	d402      	bmi.n	8004b7c <_printf_i+0x188>
 8004b76:	065f      	lsls	r7, r3, #25
 8004b78:	bf48      	it	mi
 8004b7a:	b2ad      	uxthmi	r5, r5
 8004b7c:	6031      	str	r1, [r6, #0]
 8004b7e:	07d9      	lsls	r1, r3, #31
 8004b80:	bf44      	itt	mi
 8004b82:	f043 0320 	orrmi.w	r3, r3, #32
 8004b86:	6023      	strmi	r3, [r4, #0]
 8004b88:	b11d      	cbz	r5, 8004b92 <_printf_i+0x19e>
 8004b8a:	2310      	movs	r3, #16
 8004b8c:	e7ac      	b.n	8004ae8 <_printf_i+0xf4>
 8004b8e:	4827      	ldr	r0, [pc, #156]	@ (8004c2c <_printf_i+0x238>)
 8004b90:	e7e9      	b.n	8004b66 <_printf_i+0x172>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	f023 0320 	bic.w	r3, r3, #32
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	e7f6      	b.n	8004b8a <_printf_i+0x196>
 8004b9c:	4616      	mov	r6, r2
 8004b9e:	e7bd      	b.n	8004b1c <_printf_i+0x128>
 8004ba0:	6833      	ldr	r3, [r6, #0]
 8004ba2:	6825      	ldr	r5, [r4, #0]
 8004ba4:	6961      	ldr	r1, [r4, #20]
 8004ba6:	1d18      	adds	r0, r3, #4
 8004ba8:	6030      	str	r0, [r6, #0]
 8004baa:	062e      	lsls	r6, r5, #24
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	d501      	bpl.n	8004bb4 <_printf_i+0x1c0>
 8004bb0:	6019      	str	r1, [r3, #0]
 8004bb2:	e002      	b.n	8004bba <_printf_i+0x1c6>
 8004bb4:	0668      	lsls	r0, r5, #25
 8004bb6:	d5fb      	bpl.n	8004bb0 <_printf_i+0x1bc>
 8004bb8:	8019      	strh	r1, [r3, #0]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	4616      	mov	r6, r2
 8004bc0:	e7bc      	b.n	8004b3c <_printf_i+0x148>
 8004bc2:	6833      	ldr	r3, [r6, #0]
 8004bc4:	1d1a      	adds	r2, r3, #4
 8004bc6:	6032      	str	r2, [r6, #0]
 8004bc8:	681e      	ldr	r6, [r3, #0]
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f7fb fafe 	bl	80001d0 <memchr>
 8004bd4:	b108      	cbz	r0, 8004bda <_printf_i+0x1e6>
 8004bd6:	1b80      	subs	r0, r0, r6
 8004bd8:	6060      	str	r0, [r4, #4]
 8004bda:	6863      	ldr	r3, [r4, #4]
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	2300      	movs	r3, #0
 8004be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004be4:	e7aa      	b.n	8004b3c <_printf_i+0x148>
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	4632      	mov	r2, r6
 8004bea:	4649      	mov	r1, r9
 8004bec:	4640      	mov	r0, r8
 8004bee:	47d0      	blx	sl
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d0ad      	beq.n	8004b50 <_printf_i+0x15c>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	079b      	lsls	r3, r3, #30
 8004bf8:	d413      	bmi.n	8004c22 <_printf_i+0x22e>
 8004bfa:	68e0      	ldr	r0, [r4, #12]
 8004bfc:	9b03      	ldr	r3, [sp, #12]
 8004bfe:	4298      	cmp	r0, r3
 8004c00:	bfb8      	it	lt
 8004c02:	4618      	movlt	r0, r3
 8004c04:	e7a6      	b.n	8004b54 <_printf_i+0x160>
 8004c06:	2301      	movs	r3, #1
 8004c08:	4632      	mov	r2, r6
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	47d0      	blx	sl
 8004c10:	3001      	adds	r0, #1
 8004c12:	d09d      	beq.n	8004b50 <_printf_i+0x15c>
 8004c14:	3501      	adds	r5, #1
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	9903      	ldr	r1, [sp, #12]
 8004c1a:	1a5b      	subs	r3, r3, r1
 8004c1c:	42ab      	cmp	r3, r5
 8004c1e:	dcf2      	bgt.n	8004c06 <_printf_i+0x212>
 8004c20:	e7eb      	b.n	8004bfa <_printf_i+0x206>
 8004c22:	2500      	movs	r5, #0
 8004c24:	f104 0619 	add.w	r6, r4, #25
 8004c28:	e7f5      	b.n	8004c16 <_printf_i+0x222>
 8004c2a:	bf00      	nop
 8004c2c:	08005001 	.word	0x08005001
 8004c30:	08005012 	.word	0x08005012

08004c34 <__swbuf_r>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	460e      	mov	r6, r1
 8004c38:	4614      	mov	r4, r2
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	b118      	cbz	r0, 8004c46 <__swbuf_r+0x12>
 8004c3e:	6a03      	ldr	r3, [r0, #32]
 8004c40:	b90b      	cbnz	r3, 8004c46 <__swbuf_r+0x12>
 8004c42:	f7ff f9af 	bl	8003fa4 <__sinit>
 8004c46:	69a3      	ldr	r3, [r4, #24]
 8004c48:	60a3      	str	r3, [r4, #8]
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	071a      	lsls	r2, r3, #28
 8004c4e:	d501      	bpl.n	8004c54 <__swbuf_r+0x20>
 8004c50:	6923      	ldr	r3, [r4, #16]
 8004c52:	b943      	cbnz	r3, 8004c66 <__swbuf_r+0x32>
 8004c54:	4621      	mov	r1, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f82a 	bl	8004cb0 <__swsetup_r>
 8004c5c:	b118      	cbz	r0, 8004c66 <__swbuf_r+0x32>
 8004c5e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004c62:	4638      	mov	r0, r7
 8004c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	6922      	ldr	r2, [r4, #16]
 8004c6a:	1a98      	subs	r0, r3, r2
 8004c6c:	6963      	ldr	r3, [r4, #20]
 8004c6e:	b2f6      	uxtb	r6, r6
 8004c70:	4283      	cmp	r3, r0
 8004c72:	4637      	mov	r7, r6
 8004c74:	dc05      	bgt.n	8004c82 <__swbuf_r+0x4e>
 8004c76:	4621      	mov	r1, r4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f7ff f8cb 	bl	8003e14 <_fflush_r>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d1ed      	bne.n	8004c5e <__swbuf_r+0x2a>
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	60a3      	str	r3, [r4, #8]
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	6022      	str	r2, [r4, #0]
 8004c8e:	701e      	strb	r6, [r3, #0]
 8004c90:	6962      	ldr	r2, [r4, #20]
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d004      	beq.n	8004ca2 <__swbuf_r+0x6e>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	07db      	lsls	r3, r3, #31
 8004c9c:	d5e1      	bpl.n	8004c62 <__swbuf_r+0x2e>
 8004c9e:	2e0a      	cmp	r6, #10
 8004ca0:	d1df      	bne.n	8004c62 <__swbuf_r+0x2e>
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f7ff f8b5 	bl	8003e14 <_fflush_r>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d0d9      	beq.n	8004c62 <__swbuf_r+0x2e>
 8004cae:	e7d6      	b.n	8004c5e <__swbuf_r+0x2a>

08004cb0 <__swsetup_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <__swsetup_r+0xa8>)
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	460c      	mov	r4, r1
 8004cba:	b118      	cbz	r0, 8004cc4 <__swsetup_r+0x14>
 8004cbc:	6a03      	ldr	r3, [r0, #32]
 8004cbe:	b90b      	cbnz	r3, 8004cc4 <__swsetup_r+0x14>
 8004cc0:	f7ff f970 	bl	8003fa4 <__sinit>
 8004cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc8:	0719      	lsls	r1, r3, #28
 8004cca:	d422      	bmi.n	8004d12 <__swsetup_r+0x62>
 8004ccc:	06da      	lsls	r2, r3, #27
 8004cce:	d407      	bmi.n	8004ce0 <__swsetup_r+0x30>
 8004cd0:	2209      	movs	r2, #9
 8004cd2:	602a      	str	r2, [r5, #0]
 8004cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cde:	e033      	b.n	8004d48 <__swsetup_r+0x98>
 8004ce0:	0758      	lsls	r0, r3, #29
 8004ce2:	d512      	bpl.n	8004d0a <__swsetup_r+0x5a>
 8004ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ce6:	b141      	cbz	r1, 8004cfa <__swsetup_r+0x4a>
 8004ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cec:	4299      	cmp	r1, r3
 8004cee:	d002      	beq.n	8004cf6 <__swsetup_r+0x46>
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f7ff fa7f 	bl	80041f4 <_free_r>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	2300      	movs	r3, #0
 8004d04:	6063      	str	r3, [r4, #4]
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	f043 0308 	orr.w	r3, r3, #8
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	b94b      	cbnz	r3, 8004d2a <__swsetup_r+0x7a>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d20:	d003      	beq.n	8004d2a <__swsetup_r+0x7a>
 8004d22:	4621      	mov	r1, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f8a5 	bl	8004e74 <__smakebuf_r>
 8004d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2e:	f013 0201 	ands.w	r2, r3, #1
 8004d32:	d00a      	beq.n	8004d4a <__swsetup_r+0x9a>
 8004d34:	2200      	movs	r2, #0
 8004d36:	60a2      	str	r2, [r4, #8]
 8004d38:	6962      	ldr	r2, [r4, #20]
 8004d3a:	4252      	negs	r2, r2
 8004d3c:	61a2      	str	r2, [r4, #24]
 8004d3e:	6922      	ldr	r2, [r4, #16]
 8004d40:	b942      	cbnz	r2, 8004d54 <__swsetup_r+0xa4>
 8004d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d46:	d1c5      	bne.n	8004cd4 <__swsetup_r+0x24>
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	0799      	lsls	r1, r3, #30
 8004d4c:	bf58      	it	pl
 8004d4e:	6962      	ldrpl	r2, [r4, #20]
 8004d50:	60a2      	str	r2, [r4, #8]
 8004d52:	e7f4      	b.n	8004d3e <__swsetup_r+0x8e>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e7f7      	b.n	8004d48 <__swsetup_r+0x98>
 8004d58:	20000018 	.word	0x20000018

08004d5c <memmove>:
 8004d5c:	4288      	cmp	r0, r1
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	eb01 0402 	add.w	r4, r1, r2
 8004d64:	d902      	bls.n	8004d6c <memmove+0x10>
 8004d66:	4284      	cmp	r4, r0
 8004d68:	4623      	mov	r3, r4
 8004d6a:	d807      	bhi.n	8004d7c <memmove+0x20>
 8004d6c:	1e43      	subs	r3, r0, #1
 8004d6e:	42a1      	cmp	r1, r4
 8004d70:	d008      	beq.n	8004d84 <memmove+0x28>
 8004d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d7a:	e7f8      	b.n	8004d6e <memmove+0x12>
 8004d7c:	4402      	add	r2, r0
 8004d7e:	4601      	mov	r1, r0
 8004d80:	428a      	cmp	r2, r1
 8004d82:	d100      	bne.n	8004d86 <memmove+0x2a>
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d8e:	e7f7      	b.n	8004d80 <memmove+0x24>

08004d90 <_sbrk_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4d06      	ldr	r5, [pc, #24]	@ (8004dac <_sbrk_r+0x1c>)
 8004d94:	2300      	movs	r3, #0
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	f7fb fe82 	bl	8000aa4 <_sbrk>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_sbrk_r+0x1a>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_sbrk_r+0x1a>
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	20000274 	.word	0x20000274

08004db0 <memcpy>:
 8004db0:	440a      	add	r2, r1
 8004db2:	4291      	cmp	r1, r2
 8004db4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004db8:	d100      	bne.n	8004dbc <memcpy+0xc>
 8004dba:	4770      	bx	lr
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dc6:	4291      	cmp	r1, r2
 8004dc8:	d1f9      	bne.n	8004dbe <memcpy+0xe>
 8004dca:	bd10      	pop	{r4, pc}

08004dcc <_realloc_r>:
 8004dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	4615      	mov	r5, r2
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	b921      	cbnz	r1, 8004de2 <_realloc_r+0x16>
 8004dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	4611      	mov	r1, r2
 8004dde:	f7ff ba75 	b.w	80042cc <_malloc_r>
 8004de2:	b92a      	cbnz	r2, 8004df0 <_realloc_r+0x24>
 8004de4:	f7ff fa06 	bl	80041f4 <_free_r>
 8004de8:	2400      	movs	r4, #0
 8004dea:	4620      	mov	r0, r4
 8004dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df0:	f000 f89e 	bl	8004f30 <_malloc_usable_size_r>
 8004df4:	4285      	cmp	r5, r0
 8004df6:	4606      	mov	r6, r0
 8004df8:	d802      	bhi.n	8004e00 <_realloc_r+0x34>
 8004dfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004dfe:	d8f4      	bhi.n	8004dea <_realloc_r+0x1e>
 8004e00:	4629      	mov	r1, r5
 8004e02:	4640      	mov	r0, r8
 8004e04:	f7ff fa62 	bl	80042cc <_malloc_r>
 8004e08:	4607      	mov	r7, r0
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d0ec      	beq.n	8004de8 <_realloc_r+0x1c>
 8004e0e:	42b5      	cmp	r5, r6
 8004e10:	462a      	mov	r2, r5
 8004e12:	4621      	mov	r1, r4
 8004e14:	bf28      	it	cs
 8004e16:	4632      	movcs	r2, r6
 8004e18:	f7ff ffca 	bl	8004db0 <memcpy>
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4640      	mov	r0, r8
 8004e20:	f7ff f9e8 	bl	80041f4 <_free_r>
 8004e24:	463c      	mov	r4, r7
 8004e26:	e7e0      	b.n	8004dea <_realloc_r+0x1e>

08004e28 <__swhatbuf_r>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e30:	2900      	cmp	r1, #0
 8004e32:	b096      	sub	sp, #88	@ 0x58
 8004e34:	4615      	mov	r5, r2
 8004e36:	461e      	mov	r6, r3
 8004e38:	da0d      	bge.n	8004e56 <__swhatbuf_r+0x2e>
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e40:	f04f 0100 	mov.w	r1, #0
 8004e44:	bf14      	ite	ne
 8004e46:	2340      	movne	r3, #64	@ 0x40
 8004e48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	6031      	str	r1, [r6, #0]
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	b016      	add	sp, #88	@ 0x58
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	466a      	mov	r2, sp
 8004e58:	f000 f848 	bl	8004eec <_fstat_r>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	dbec      	blt.n	8004e3a <__swhatbuf_r+0x12>
 8004e60:	9901      	ldr	r1, [sp, #4]
 8004e62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e6a:	4259      	negs	r1, r3
 8004e6c:	4159      	adcs	r1, r3
 8004e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e72:	e7eb      	b.n	8004e4c <__swhatbuf_r+0x24>

08004e74 <__smakebuf_r>:
 8004e74:	898b      	ldrh	r3, [r1, #12]
 8004e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e78:	079d      	lsls	r5, r3, #30
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	d507      	bpl.n	8004e90 <__smakebuf_r+0x1c>
 8004e80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	6123      	str	r3, [r4, #16]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	6163      	str	r3, [r4, #20]
 8004e8c:	b003      	add	sp, #12
 8004e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e90:	ab01      	add	r3, sp, #4
 8004e92:	466a      	mov	r2, sp
 8004e94:	f7ff ffc8 	bl	8004e28 <__swhatbuf_r>
 8004e98:	9f00      	ldr	r7, [sp, #0]
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f7ff fa14 	bl	80042cc <_malloc_r>
 8004ea4:	b948      	cbnz	r0, 8004eba <__smakebuf_r+0x46>
 8004ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eaa:	059a      	lsls	r2, r3, #22
 8004eac:	d4ee      	bmi.n	8004e8c <__smakebuf_r+0x18>
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	f043 0302 	orr.w	r3, r3, #2
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	e7e2      	b.n	8004e80 <__smakebuf_r+0xc>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	6020      	str	r0, [r4, #0]
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec2:	81a3      	strh	r3, [r4, #12]
 8004ec4:	9b01      	ldr	r3, [sp, #4]
 8004ec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004eca:	b15b      	cbz	r3, 8004ee4 <__smakebuf_r+0x70>
 8004ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 f81d 	bl	8004f10 <_isatty_r>
 8004ed6:	b128      	cbz	r0, 8004ee4 <__smakebuf_r+0x70>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	431d      	orrs	r5, r3
 8004ee8:	81a5      	strh	r5, [r4, #12]
 8004eea:	e7cf      	b.n	8004e8c <__smakebuf_r+0x18>

08004eec <_fstat_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d07      	ldr	r5, [pc, #28]	@ (8004f0c <_fstat_r+0x20>)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	602b      	str	r3, [r5, #0]
 8004efa:	f7fb fdab 	bl	8000a54 <_fstat>
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	d102      	bne.n	8004f08 <_fstat_r+0x1c>
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	b103      	cbz	r3, 8004f08 <_fstat_r+0x1c>
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	bd38      	pop	{r3, r4, r5, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000274 	.word	0x20000274

08004f10 <_isatty_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4d06      	ldr	r5, [pc, #24]	@ (8004f2c <_isatty_r+0x1c>)
 8004f14:	2300      	movs	r3, #0
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	f7fb fdaa 	bl	8000a74 <_isatty>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_isatty_r+0x1a>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_isatty_r+0x1a>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	20000274 	.word	0x20000274

08004f30 <_malloc_usable_size_r>:
 8004f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f34:	1f18      	subs	r0, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bfbc      	itt	lt
 8004f3a:	580b      	ldrlt	r3, [r1, r0]
 8004f3c:	18c0      	addlt	r0, r0, r3
 8004f3e:	4770      	bx	lr

08004f40 <_init>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr

08004f4c <_fini>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr
